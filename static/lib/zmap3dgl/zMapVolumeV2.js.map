{"version":3,"sources":["zMapVolumeV2.es6"],"names":[],"mappings":"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","file":"zMapVolumeV2.js","sourcesContent":["/**\r\n * 体数据绘制shader\r\n * @type {{filterVertexShaderPass: string [属性过滤顶点着色器],\r\n * filterFragmentShaderPass: string [属性过滤片元着色器],\r\n * vertexShaderPass: string [体数据绘制顶点着色器],\r\n * fragmentShaderPass: string [体数据绘制片元着色器],\r\n * sliceVertexShaderPass: string [切片顶点着色器],\r\n * sliceFragmentShaderPass: string [切片片元着色器]}}\r\n */\r\nconst GLSL_VOLUME = {\r\n    filterVertexShaderPass: `\r\n    varying vec4 worldPos;\r\n\r\n    attribute float batchId;\r\n    attribute vec3 position3DHigh;\r\n    attribute vec3 position3DLow;\r\n\r\n    vec4 czm_translateRelativeToEye2(vec3 high, vec3 low)\r\n    {\r\n        vec3 highDifference = high - czm_encodedCameraPositionMCHigh;\r\n        vec3 lowDifference = low - czm_encodedCameraPositionMCLow;\r\n        return vec4(highDifference + lowDifference, 1.0);\r\n    }\r\n\r\n    void main()\r\n    {\r\n        vec4 p = czm_translateRelativeToEye2(position3DHigh, position3DLow);\r\n        gl_Position = czm_modelViewProjectionRelativeToEye * p;\r\n\r\n        vec3 pos = position3DHigh + position3DLow;\r\n        worldPos = czm_model * vec4(pos, 1.0);\r\n    }    \r\n    `,\r\n    filterFragmentShaderPass: `\r\n    varying vec4 worldPos;\r\n\r\n    const int MAX_STEPS = 256;\r\n    const float steps = 256.0;\r\n    const float alphaCorrection = 0.10;\r\n    const float zDataSliceNumber = 63.0;\r\n\r\n    // Z方向-256层体数据变为64层体数据\r\n    vec4 sampleAs3DTexture( vec3 texCoord )\r\n    {\r\n        vec4 colorSlice1, colorSlice2;\r\n        vec2 texCoordSlice1, texCoordSlice2;\r\n        \r\n        //The z coordinate determines which Z slice we have to look for.\r\n        //Z slice number goes from 0 to 255.\r\n        float zSliceNumber1 = floor(texCoord.z * zDataSliceNumber);\r\n        \r\n        //As we use trilinear we go the next Z slice.\r\n        float zSliceNumber2 = min( zSliceNumber1 + 1.0, zDataSliceNumber); //Clamp to 255\r\n        \r\n        //The Z slices are stored in a matrix of 16x16 of Z slices.\r\n        //The original UV coordinates have to be rescaled by the tile numbers in each row and column.\r\n        texCoord.xy /= 8.0;\r\n\r\n        texCoordSlice1 = texCoordSlice2 = texCoord.xy;\r\n                                    \r\n        //Add an offset to the original UV coordinates depending on the row and column number.\r\n        texCoordSlice1.x += (mod(zSliceNumber1, 8.0 ) / 8.0);\r\n        texCoordSlice1.y += floor((zDataSliceNumber - zSliceNumber1) / 8.0) / 8.0;\r\n            \r\n        texCoordSlice2.x += (mod(zSliceNumber2, 8.0 ) / 8.0);\r\n        texCoordSlice2.y += floor((zDataSliceNumber - zSliceNumber2) / 8.0) / 8.0;\r\n        \r\n        //Get the opacity value from the 2D texture.\r\n        //Bilinear filtering is done at each texture2D by default.\r\n        colorSlice1 = texture2D( cubeTex_0, texCoordSlice1 );\r\n        colorSlice2 = texture2D( cubeTex_0, texCoordSlice2 );\r\n\r\n        \r\n        //Based on the opacity obtained earlier, get the RGB color in the transfer function texture.\r\n        colorSlice1.rgb = texture2D( transferTex_1, vec2(colorSlice1.a, 1.0) ).rgb;\r\n        colorSlice2.rgb = texture2D( transferTex_1, vec2(colorSlice2.a, 1.0) ).rgb;\r\n        \r\n        //How distant is zSlice1 to ZSlice2. Used to interpolate between one Z slice and the other.\r\n        float zDifference = mod(texCoord.z * zDataSliceNumber, 1.0);\r\n\r\n        //Finally interpolate between the two intermediate colors of each Z slice.\r\n        //return mix(colorSlice1, colorSlice2, zDifference);\r\n\r\n        float ft = zDifference * 3.1415926;\r\n        float f = (1.0 - cos(ft) * 0.5);\r\n        return mix(colorSlice1, colorSlice2, f);\r\n\r\n\r\n        //float weight = abs(zSliceNumber2 / 64.0 - texCoord.z) / abs(zSliceNumber1 / 64.0 - zSliceNumber2 / 64.0);\r\n        ///return mix(colorSlice1, colorSlice2, weight);\r\n    }\r\n\r\n    vec4 interAs3DTexture(vec3 curPos)\r\n    {\r\n        float x = curPos.x;\r\n        float y = curPos.y;\r\n        float z = curPos.z;\r\n\r\n        float i = ceil(x/(1.0/256.0));\r\n        float j = ceil(y/(1.0/256.0));\r\n\r\n        float x5 = i*(1.0/256.0) - (1.0/512.0);\r\n        float y5 = j*(1.0/256.0) - (1.0/512.0);\r\n\r\n        float a1, a2; \r\n        vec4 temV1, temV2, v1, v2, v3, v4, interV;\r\n        float d = distance((x,y),(x5,y5));\r\n        vec4 v = sampleAs3DTexture(vec3(x5, y5, z));\r\n\r\n        if(x<x5 && y<y5)\r\n        {\r\n            float x1 = (i-5.0)*(1.0/256.0) - (1.0/512.0);\r\n            float y1 = (j-5.0)*(1.0/256.0) - (1.0/512.0); \r\n            float x2 = i*(1.0/256.0) - (1.0/512.0);\r\n            float y2 = (j-5.0)*(1.0/256.0) - (1.0/512.0); \r\n            float x4 = (i-5.0)*(1.0/256.0) - (1.0/512.0);\r\n            float y4 = j*(1.0/256.0) - (1.0/512.0); \r\n\r\n            v1 = sampleAs3DTexture(vec3(x1, y1, z));\r\n            v2 = sampleAs3DTexture(vec3(x2, y2, z));\r\n            v3 = sampleAs3DTexture(vec3(x4, y4, z));\r\n            v4 = v;\r\n\r\n            a1 = (x-x1)/(x2-x1);\r\n            a2 = (y-y1)/(y4-y1);\r\n\r\n            temV1 = mix(v1, v2, a1);\r\n            temV2 = mix(v3, v4, a2);\r\n\r\n            interV = vec4(1.0, 0.0, 0.0, 0.0);//mix(temV1, temV2, a2);\r\n        }else if(x<x5 && y>y5)\r\n        {\r\n            float x4 = (i-5.0)*(1.0/256.0) - (1.0/512.0);\r\n            float y4 = j*(1.0/256.0) - (1.0/512.0); \r\n            float x7 = (i-5.0)*(1.0/256.0) - (1.0/512.0);\r\n            float y7 = (j+5.0)*(1.0/256.0) - (1.0/512.0); \r\n            float x8 = i*(1.0/256.0) - (1.0/512.0);\r\n            float y8 = (j+5.0)*(1.0/256.0) - (1.0/512.0); \r\n\r\n            v1 = sampleAs3DTexture(vec3(x4, y4, z));\r\n            v2 = v;\r\n            v3 = sampleAs3DTexture(vec3(x7, y7, z));\r\n            v4 = sampleAs3DTexture(vec3(x8, y8, z));\r\n\r\n            a1 = (x-x4)/(x5-x4);\r\n            a2 = (y-y4)/(y7-y4);\r\n\r\n            temV1 = mix(v1, v2, a1);\r\n            temV2 = mix(v3, v4, a2);\r\n\r\n            interV = vec4(1.0, 0.0, 0.0, 1.0);//mix(temV1, temV2, a2);\r\n        }else if(x>x5 && y<y5)\r\n        {\r\n            float x2 = i*(1.0/256.0) - (1.0/512.0);\r\n            float y2 = (j-5.0)*(1.0/256.0) - (1.0/512.0); \r\n            float x3 = (i+5.0)*(1.0/256.0) - (1.0/512.0);\r\n            float y3 = (j-5.0)*(1.0/256.0) - (1.0/512.0); \r\n            float x6 = (i+5.0)*(1.0/256.0) - (1.0/512.0);\r\n            float y6 = j*(1.0/256.0) - (1.0/512.0); \r\n\r\n            v1 = sampleAs3DTexture(vec3(x2, y2, z));\r\n            v2 = sampleAs3DTexture(vec3(x3, y3, z));\r\n            v3 = v;\r\n            v4 = sampleAs3DTexture(vec3(x6, y6, z));\r\n\r\n            a1 = (x-x2)/(x3-x2);\r\n            a2 = (y-y2)/(y5-y2);\r\n\r\n            temV1 = mix(v1, v2, a1);\r\n            temV2 = mix(v3, v4, a2);\r\n\r\n            interV = vec4(1.0, 0.0, 0.0, 1.0);//mix(temV1, temV2, a2);\r\n        }else if(x>x5 && y>y5)\r\n        {\r\n            float x6 = (i+5.0)*(1.0/256.0) - (1.0/512.0);\r\n            float y6 = j*(1.0/256.0) - (1.0/512.0); \r\n            float x8 = i*(1.0/256.0) - (1.0/512.0);\r\n            float y8 = (j+5.0)*(1.0/256.0) - (1.0/512.0);\r\n            float x9 = (i+5.0)*(1.0/256.0) - (1.0/512.0);\r\n            float y9 = (j+5.0)*(1.0/256.0) - (1.0/512.0); \r\n\r\n            v1 = v;\r\n            v2 = sampleAs3DTexture(vec3(x6, y6, z));\r\n            v3 = sampleAs3DTexture(vec3(x8, y8, z));\r\n            v4 = sampleAs3DTexture(vec3(x9, y9, z));\r\n\r\n            a1 = (x-x5)/(x6-x5);\r\n            a2 = (y-y5)/(y8-y5);\r\n\r\n            temV1 = mix(v1, v2, a1);\r\n            temV2 = mix(v3, v4, a2);\r\n\r\n            interV = vec4(1.0, 0.0, 0.0, 1.0);//mix(temV1, temV2, a2);\r\n        }else\r\n        {\r\n            interV = sampleAs3DTexture(vec3(x5, y5, z));\r\n        }\r\n\r\n        return interV;\r\n    }\r\n\r\n    void main( void ) {\r\n        vec4 locPos = invMat_2 * worldPos;\r\n        vec4 locViewerPositionWC = invMat_2 * vec4(czm_viewerPositionWC, 1.0);\r\n        vec3 dir = locPos.xyz - locViewerPositionWC.xyz; \r\n\r\n        vec3 boxsize = vec3(boxLon_3, boxLat_4, boxHeight_5);\r\n\r\n        float delta = 1.0 / steps;\r\n\r\n        vec3 deltaDirection = normalize(dir / boxsize) * delta;\r\n        float deltaDirectionLength = length(deltaDirection);\r\n\r\n        vec3 currentPosition = locPos.xyz / boxsize;\r\n     \r\n        vec4 accumulatedColor = vec4(0.0);\r\n        float accumulatedAlpha = 0.0;\r\n        \r\n        //float accumulatedLength = 0.0;\r\n        \r\n        vec4 colorSample;\r\n        float alphaSample;\r\n    #define TEST 0\r\n\r\n    #if TEST\r\n        gl_FragColor = sampleAs3DTexture( currentPosition );\r\n\r\n    #else\r\n\r\n\r\n        for(int i = 0; i < MAX_STEPS; i++)\r\n        {\r\n            //Get the voxel intensity value from the 3D texture.    \r\n            colorSample = sampleAs3DTexture( currentPosition );\r\n\r\n            // vec3 currentPosition1 = vec3(max(0.0, currentPosition.x-(2.0/256.0)), max(0.0, currentPosition.y-(2.0/256.0)), currentPosition.z );\r\n            // vec4 a1 = sampleAs3DTexture( currentPosition1 );\r\n\r\n            // vec3 currentPosition2 = vec3(max(0.0, currentPosition.x-(2.0/256.0)), min(1.0, currentPosition.y+(2.0/256.0)), currentPosition.z );\r\n            // vec4 a2 = sampleAs3DTexture( currentPosition2 );\r\n\r\n            // vec3 currentPosition3 = vec3(min(1.0, currentPosition.x+(2.0/256.0)), max(0.0, currentPosition.y-(2.0/256.0)), currentPosition.z );\r\n            // vec4 a3 = sampleAs3DTexture( currentPosition3 );\r\n\r\n            // vec3 currentPosition4 = vec3(min(1.0, currentPosition.x+(2.0/256.0)), min(1.0, currentPosition.y+(2.0/256.0)), currentPosition.z );\r\n            // vec4 a4 = sampleAs3DTexture( currentPosition4 );\r\n\r\n            // vec3 currentPosition5 = vec3(max(0.0, currentPosition.x-(2.0/256.0)), currentPosition.y, currentPosition.z );\r\n            // vec4 a5 = sampleAs3DTexture( currentPosition5 );\r\n\r\n            // vec3 currentPosition6 = vec3(currentPosition.x, min(1.0, currentPosition.y+(2.0/256.0)), currentPosition.z );\r\n            // vec4 a6 = sampleAs3DTexture( currentPosition6 );\r\n\r\n            // vec3 currentPosition7 = vec3(currentPosition.x, max(0.0, currentPosition.y-(2.0/256.0)), currentPosition.z );\r\n            // vec4 a7 = sampleAs3DTexture( currentPosition7 );\r\n\r\n            // vec3 currentPosition8 = vec3(min(1.0, currentPosition.x+(2.0/256.0)), currentPosition.y, currentPosition.z );\r\n            // vec4 a8 = sampleAs3DTexture( currentPosition8 );\r\n\r\n            // colorSample = (( a1+a2+a3+a4)/1.41+a5+a6+a7+a8)/8.0;\r\n\r\n            //////////////////////////////////////////////////////////////////////////\r\n            float k,b,x;\r\n\r\n            if(line_12[0][2] != 0.0)\r\n            {\r\n                k = (float(line_12[0][3]) - float(line_12[0][1]))/(float(line_12[0][2]) - float(line_12[0][0]));\r\n                b = float(line_12[0][3]) - k * float(line_12[0][2]); \r\n            }\r\n\r\n            if(line_12[1][0] != 0.0)\r\n            {\r\n                k = (float(line_12[1][1]) - float(line_12[0][3]))/(float(line_12[1][0]) - float(line_12[0][2]));\r\n                b = float(line_12[1][1]) - k * float(line_12[1][0]); \r\n            } \r\n\r\n            if(line_12[1][2] != 0.0)\r\n            {\r\n                k = (float(line_12[1][3]) - float(line_12[1][1]))/(float(line_12[1][2]) - float(line_12[1][0]));\r\n                b = float(line_12[1][3]) - k * float(line_12[1][2]);  \r\n            }\r\n\r\n            if(line_12[2][0] != 0.0)\r\n            {\r\n                k = (float(line_12[2][1]) - float(line_12[1][3]))/(float(line_12[2][0]) - float(line_12[1][2]));\r\n                b = float(line_12[2][1]) - k * float(line_12[2][0]);  \r\n            }\r\n\r\n            if(line_12[2][2] != 0.0)\r\n            {\r\n                k = (float(line_12[2][3]) - float(line_12[2][1]))/(float(line_12[2][2]) - float(line_12[2][0]));\r\n                b = float(line_12[2][3]) - k * float(line_12[2][2]);  \r\n            }\r\n\r\n            if(line_12[3][0] != 0.0)\r\n            {\r\n                k = (float(line_12[3][1]) - float(line_12[2][3]))/(float(line_12[3][0]) - float(line_12[2][2]));\r\n                b = float(line_12[3][1]) - k * float(line_12[3][0]);  \r\n            }\r\n\r\n            if(line_12[3][2] != 0.0 )\r\n            {\r\n                k = (float(line_12[3][3]) - float(line_12[3][1]))/(float(line_12[3][2]) - float(line_12[3][0]));\r\n                b = float(line_12[3][3]) - k * float(line_12[3][2]);  \r\n            }\r\n\r\n            x = colorSample.a;\r\n            colorSample.a = (k * x + b) / 255.0;\r\n           \r\n\r\n            if(currentPosition.x < minLongitude_7/boxLon_3) colorSample = vec4(0.0, 0.0, 0.0, 0.0);\r\n            if(currentPosition.y < minLatitude_8/boxLat_4) colorSample = vec4(0.0, 0.0, 0.0, 0.0);\r\n            if(currentPosition.z < minHeight_6/boxHeight_5) colorSample = vec4(0.0, 0.0, 0.0, 0.0);\r\n            if(currentPosition.x > maxLongitude_10/boxLon_3) colorSample = vec4(0.0, 0.0, 0.0, 0.0);\r\n            if(currentPosition.y > maxLatitude_11/boxLat_4) colorSample = vec4(0.0, 0.0, 0.0, 0.0);\r\n            if(currentPosition.z > maxHeight_9/boxHeight_5) colorSample = vec4(0.0, 0.0, 0.0, 0.0);                 \r\n\r\n            \r\n            #if 0\r\n                accumulatedColor.rgb = accumulatedColor.rgb * (accumulatedAlpha) + colorSample.rgb * (1.0 - accumulatedAlpha);\r\n                accumulatedAlpha = accumulatedAlpha + colorSample.a - accumulatedAlpha * colorSample.a;\r\n            #else\r\n            //Allow the alpha correction customization\r\n            alphaSample = colorSample.a * alphaCorrection;\r\n\r\n            //Perform the composition.\r\n            accumulatedColor += (1.0 - accumulatedAlpha) * colorSample * alphaSample;\r\n            \r\n            //Store the alpha accumulated so far.\r\n            accumulatedAlpha += (1.0 - accumulatedAlpha) * alphaSample;\r\n            #endif\r\n            \r\n            //Advance the ray.\r\n            currentPosition += deltaDirection;\r\n                      \r\n            //If the length traversed is more than the ray length, or if the alpha accumulated reaches 1.0 then exit.\r\n            if(accumulatedAlpha > 1.0 )\r\n               break;\r\n\r\n            if(currentPosition.x > 1.0) break;\r\n            if(currentPosition.y > 1.0) break;\r\n            if(currentPosition.z > 1.0) break;\r\n            if(currentPosition.x < 0.0) break;\r\n            if(currentPosition.y < 0.0) break;\r\n            if(currentPosition.z < 0.0) break;\r\n        }\r\n\r\n        //vec3 normal =  normalize(normall_13);\r\n        // vec3 light = vec3(1.0,1.0,1.0);\r\n        //vec3 ambientlight = vec3(1.0,1.0,1.0);     \r\n        //vec3 lightDir = normalize(worldPos.xyz);\r\n        //float nDotL = max(dot(lightDir, normal),0.0);\r\n        //vec3 diffuse = light * accumulatedColor.rgb * nDotL;\r\n        //vec3 ambient = ambientlight * accumulatedColor.rgb;\r\n        //gl_FragColor  = vec4(diffuse + ambient, accumulatedAlpha);\r\n\r\n        gl_FragColor  = vec4(accumulatedColor.rgb, accumulatedAlpha);\r\n    #endif\r\n    }              \r\n    \r\n    `,\r\n    vertexShaderPass: `\r\n    varying vec4 worldPos;\r\n    \r\n    attribute float batchId;\r\n    attribute vec3 position3DHigh;\r\n    attribute vec3 position3DLow;\r\n    //uniform vec3 uNormal;\r\n    //varying vec3 v_normal;\r\n\r\n    vec4 czm_translateRelativeToEye2(vec3 high, vec3 low)    \r\n    {\r\n        vec3 highDifference = high - czm_encodedCameraPositionMCHigh;\r\n        vec3 lowDifference = low - czm_encodedCameraPositionMCLow;\r\n        return vec4(highDifference + lowDifference, 1.0);\r\n    }\r\n\r\n    void main()\r\n    {\r\n        //v_normal =  normalize(czm_normal * normall_13);\r\n        //v_normal =  normall_13;\r\n\r\n        vec4 p = czm_translateRelativeToEye2(position3DHigh, position3DLow);\r\n        gl_Position = czm_modelViewProjectionRelativeToEye * p;   \r\n\r\n        vec3 pos = position3DHigh + position3DLow;\r\n        //czm_model\r\n        //一种GLSL一致变量 表示4x4模型变换矩阵，可将模型坐标转换为世界坐标。\r\n        worldPos = czm_model * vec4(pos, 1.0);\r\n    }    \r\n    `,\r\n    fragmentShaderPass: `\r\n        varying vec4 worldPos;\r\n\r\n        const int MAX_STEPS = 256;\r\n        const float steps = 256.0;\r\n        const float alphaCorrection  = 0.10;\r\n        const float zDataSliceNumber = 63.0;\r\n\r\n        //varying vec3 v_normal;\r\n\r\n        // Z方向256层体数据变为64层体数据\r\n        vec4 sampleAs3DTexture( vec3 texCoord )\r\n        {\r\n            vec4 colorSlice1, colorSlice2;\r\n            vec2 texCoordSlice1, texCoordSlice2;\r\n            \r\n            //The z coordinate determines which Z slice we have to look for.\r\n            //Z slice number goes from 0 to 255.\r\n            float zSliceNumber1 = floor(texCoord.z  * zDataSliceNumber);\r\n            \r\n            //As we use trilinear we go the next Z slice.\r\n            float zSliceNumber2 = min( zSliceNumber1 + 1.0, zDataSliceNumber); //Clamp to 255\r\n            \r\n            //The Z slices are stored in a matrix of 16x16 of Z slices.\r\n            //The original UV coordinates have to be rescaled by the tile numbers in each row and column.\r\n            texCoord.xy /= 8.0;\r\n\r\n            texCoordSlice1 = texCoordSlice2 = texCoord.xy;\r\n                                        \r\n            //Add an offset to the original UV coordinates depending on the row and column number.\r\n            texCoordSlice1.x += (mod(zSliceNumber1, 8.0 ) / 8.0);\r\n            texCoordSlice1.y += floor((zDataSliceNumber - zSliceNumber1) / 8.0) / 8.0;\r\n                \r\n            texCoordSlice2.x += (mod(zSliceNumber2, 8.0 ) / 8.0);\r\n            texCoordSlice2.y += floor((zDataSliceNumber - zSliceNumber2) / 8.0) / 8.0;\r\n            \r\n            //Get the opacity value from the 2D texture.\r\n            //Bilinear filtering is done at each texture2D by default.\r\n            colorSlice1 = texture2D( cubeTex_0, texCoordSlice1 );\r\n            colorSlice2 = texture2D( cubeTex_0, texCoordSlice2 );\r\n\r\n            \r\n            //Based on the opacity obtained earlier, get the RGB color in the transfer function texture.\r\n            colorSlice1.rgb = texture2D( transferTex_1, vec2(colorSlice1.a, 1.0) ).rgb;\r\n            colorSlice2.rgb = texture2D( transferTex_1, vec2(colorSlice2.a, 1.0) ).rgb;\r\n            \r\n            //How distant is zSlice1 to ZSlice2. Used to interpolate between one Z slice and the other.\r\n            float zDifference = mod(texCoord.z * zDataSliceNumber, 1.0);\r\n\r\n            //Finally interpolate between the two intermediate colors of each Z slice.\r\n            return mix(colorSlice1, colorSlice2, zDifference);\r\n\r\n            //float weight = abs(zSliceNumber2 / 64.0 - texCoord.z);\r\n            //return mix(colorSlice1, colorSlice2, weight);\r\n        } \r\n\r\n       \r\n\r\n        /// 主函数\r\n        void main( void ) {\r\n\r\n            vec4 locPos = invMat_2 * worldPos;\r\n            //czm_viewerPositionWC\r\n            // 一种GLSL一致变量，表示观察者（相机）在世界坐标中的位置。\r\n            vec4 locViewerPositionWC = invMat_2 * vec4(czm_viewerPositionWC, 1.0);\r\n            vec3 dir = locPos.xyz - locViewerPositionWC.xyz; \r\n\r\n            vec3 boxsize = vec3(boxLon_3, boxLat_4, boxHeight_5);\r\n\r\n            float delta = 1.0 / steps;\r\n\r\n            vec3 deltaDirection = normalize(dir / boxsize) * delta;\r\n            float deltaDirectionLength = length(deltaDirection);\r\n\r\n            vec3 currentPosition = locPos.xyz / boxsize;\r\n         \r\n            vec4 accumulatedColor = vec4(0.0);\r\n            float accumulatedAlpha = 0.0;\r\n            \r\n            vec4 colorSample;\r\n            float alphaSample;\r\n#define TEST 0\r\n\r\n#if TEST\r\n            gl_FragColor = sampleAs3DTexture( currentPosition );\r\n#else \r\n\r\n            for(int i = 0; i < MAX_STEPS; i++)\r\n            {\r\n                //Get the voxel intensity value from the 3D texture.    \r\n                colorSample = sampleAs3DTexture( currentPosition );\r\n                //colorSample = sampletexture( currentPosition , deltaDirectionLength )\r\n\r\n                if(currentPosition.x < minLongitude_7/boxLon_3) colorSample = vec4(0.0, 0.0, 0.0, 0.0);\r\n                if(currentPosition.y < minLatitude_8/boxLat_4) colorSample = vec4(0.0, 0.0, 0.0, 0.0);\r\n                if(currentPosition.z < minHeight_6/boxHeight_5) colorSample = vec4(0.0, 0.0, 0.0, 0.0);\r\n                if(currentPosition.x > maxLongitude_10/boxLon_3) colorSample = vec4(0.0, 0.0, 0.0, 0.0);\r\n                if(currentPosition.y > maxLatitude_11/boxLat_4) colorSample = vec4(0.0, 0.0, 0.0, 0.0);\r\n                if(currentPosition.z > maxHeight_9/boxHeight_5) colorSample = vec4(0.0, 0.0, 0.0, 0.0);                 \r\n\r\n                //colorSample.a = colorSample.a * 1.0;\r\n                #if 0\r\n                    accumulatedColor.rgb = accumulatedColor.rgb * (accumulatedAlpha) + colorSample.rgb * (1.0 - accumulatedAlpha);\r\n                    accumulatedAlpha = accumulatedAlpha + colorSample.a - accumulatedAlpha * colorSample.a;\r\n                #else\r\n                //Allow the alpha correction customization\r\n                alphaSample = colorSample.a * alphaCorrection;\r\n\r\n                //Perform the composition.\r\n                accumulatedColor += (1.0 - accumulatedAlpha) * colorSample * alphaSample;\r\n                \r\n                //Store the alpha accumulated so far.\r\n                accumulatedAlpha += (1.0 - accumulatedAlpha) * alphaSample;\r\n                #endif\r\n                \r\n                //Advance the ray.\r\n                currentPosition += deltaDirection;\r\n                //accumulatedLength += deltaDirectionLength;\r\n                          \r\n                //If the length traversed is more than the ray length, or if the alpha accumulated reaches 1.0 then exit.\r\n                if(accumulatedAlpha > 1.0 )\r\n                   break;\r\n\r\n                if(currentPosition.x > 1.0) break;\r\n                if(currentPosition.y > 1.0) break;\r\n                if(currentPosition.z > 1.0) break;\r\n                if(currentPosition.x < 0.0) break;\r\n                if(currentPosition.y < 0.0) break;\r\n                if(currentPosition.z < 0.0) break;\r\n            }\r\n\r\n            //ec3 normal =  normalize(czm_normal * v_normal); \r\n            vec3 normal =  czm_normal * normall_13;\r\n            vec3 lightcolor = vec3(1.0,1.0,1.0);\r\n            vec3 ambientlight = vec3(1.0,1.0,1.0); \r\n            vec3 position = vec3(100.0,0.0,2000.0); \r\n            vec3 lightDir = normalize(worldPos.xyz);\r\n            float nDotL = max(dot(lightDir, normal),0.0);\r\n            vec3 diffuse = lightcolor * accumulatedColor.rgb * nDotL;\r\n            vec3 ambient = ambientlight * accumulatedColor.rgb;\r\n            gl_FragColor  = vec4(diffuse + ambient, accumulatedAlpha);\r\n\r\n            //gl_FragColor  = vec4(accumulatedColor.rgb, accumulatedAlpha);\r\n#endif\r\n        }                             \r\n    `,\r\n    sliceVertexShaderPass: `\r\n    varying vec4 worldPos;\r\n    \r\n    attribute float batchId;\r\n    attribute vec3 position3DHigh;\r\n    attribute vec3 position3DLow;\r\n\r\n    vec4 czm_translateRelativeToEye2(vec3 high, vec3 low)\r\n    {\r\n        vec3 highDifference = high - czm_encodedCameraPositionMCHigh;\r\n        vec3 lowDifference = low - czm_encodedCameraPositionMCLow;\r\n        return vec4(highDifference + lowDifference, 1.0);\r\n    }\r\n\r\n    void main()\r\n    {\r\n        vec4 p = czm_translateRelativeToEye2(position3DHigh, position3DLow);\r\n        gl_Position = czm_modelViewProjectionRelativeToEye * p;\r\n\r\n        vec3 pos = position3DHigh + position3DLow;\r\n        worldPos = czm_model * vec4(pos, 1.0);\r\n    }\r\n    `,\r\n    sliceFragmentShaderPass: `\r\n    varying vec4 worldPos;\r\n\r\n    const int MAX_STEPS = 256;\r\n    const float zDataSliceNumber = 63.0;\r\n\r\n    // Z方向-256层体数据变为64层体数据\r\n    vec4 sampleAs3DTexture( vec3 texCoord )\r\n    {\r\n        vec4 colorSlice1, colorSlice2;\r\n        vec2 texCoordSlice1, texCoordSlice2;\r\n        \r\n        //The z coordinate determines which Z slice we have to look for.\r\n        //Z slice number goes from 0 to 255.\r\n        float zSliceNumber1 = floor(texCoord.z  * zDataSliceNumber);\r\n        \r\n        //As we use trilinear we go the next Z slice.\r\n        float zSliceNumber2 = min( zSliceNumber1 + 1.0, zDataSliceNumber); //Clamp to 255\r\n        \r\n        //The Z slices are stored in a matrix of 16x16 of Z slices.\r\n        //The original UV coordinates have to be rescaled by the tile numbers in each row and column.\r\n        texCoord.xy /= 8.0;\r\n\r\n        texCoordSlice1 = texCoordSlice2 = texCoord.xy;\r\n                                    \r\n        //Add an offset to the original UV coordinates depending on the row and column number.\r\n        texCoordSlice1.x += (mod(zSliceNumber1, 8.0 ) / 8.0);\r\n        texCoordSlice1.y += floor((zDataSliceNumber - zSliceNumber1) / 8.0) / 8.0;\r\n            \r\n        texCoordSlice2.x += (mod(zSliceNumber2, 8.0 ) / 8.0);\r\n        texCoordSlice2.y += floor((zDataSliceNumber - zSliceNumber2) / 8.0) / 8.0;\r\n        \r\n        //Get the opacity value from the 2D texture.\r\n        //Bilinear filtering is done at each texture2D by default.\r\n        colorSlice1 = texture2D( cubeTex_0, texCoordSlice1 );\r\n        colorSlice2 = texture2D( cubeTex_0, texCoordSlice2 );\r\n\r\n        //Based on the opacity obtained earlier, get the RGB color in the transfer function texture.\r\n        colorSlice1.rgb = texture2D( transferTex_1, vec2(colorSlice1.a, 1.0) ).rgb;\r\n        colorSlice2.rgb = texture2D( transferTex_1, vec2(colorSlice2.a, 1.0) ).rgb;\r\n        \r\n        //How distant is zSlice1 to ZSlice2. Used to interpolate between one Z slice and the other.\r\n        float zDifference = mod(texCoord.z * zDataSliceNumber, 1.0);\r\n\r\n        //Finally interpolate between the two intermediate colors of each Z slice.\r\n        return mix(colorSlice1, colorSlice2, zDifference);\r\n    }\r\n\r\n    void main( void ) {\r\n        vec4 locPos = invMat_2 * worldPos;\r\n        \r\n        vec4 colorSample;\r\n        float accumulatedAlpha = 0.0;\r\n\r\n        #define TEST 0\r\n\r\n        #if TEST\r\n            gl_FragColor = sampleAs3DTexture( vec3(locPos.x/boxLong_3, locPos.y/boxWidth_4, locPos.z/boxHeight_5) );\r\n\r\n        #else\r\n\r\n        colorSample  = sampleAs3DTexture(vec3(locPos.x/boxLong_3, locPos.y/boxWidth_4, locPos.z/boxHeight_5));\r\n    \r\n        float k,b,x;\r\n\r\n            if(line_6[0][2] != 0.0)\r\n            {\r\n                k = (float(line_6[0][3]) - float(line_6[0][1]))/(float(line_6[0][2]) - float(line_6[0][0]));\r\n                b = float(line_6[0][3]) - k * float(line_6[0][2]); \r\n            }\r\n\r\n            if(line_6[1][0] != 0.0)\r\n            {\r\n                k = (float(line_6[1][1]) - float(line_6[0][3]))/(float(line_6[1][0]) - float(line_6[0][2]));\r\n                b = float(line_6[1][1]) - k * float(line_6[1][0]); \r\n            } \r\n\r\n            if(line_6[1][2] != 0.0)\r\n            {\r\n                k = (float(line_6[1][3]) - float(line_6[1][1]))/(float(line_6[1][2]) - float(line_6[1][0]));\r\n                b = float(line_6[1][3]) - k * float(line_6[1][2]);  \r\n            }\r\n\r\n            if(line_6[2][0] != 0.0)\r\n            {\r\n                k = (float(line_6[2][1]) - float(line_6[1][3]))/(float(line_6[2][0]) - float(line_6[1][2]));\r\n                b = float(line_6[2][1]) - k * float(line_6[2][0]);  \r\n            }\r\n\r\n            if(line_6[2][2] != 0.0)\r\n            {\r\n                k = (float(line_6[2][3]) - float(line_6[2][1]))/(float(line_6[2][2]) - float(line_6[2][0]));\r\n                b = float(line_6[2][3]) - k * float(line_6[2][2]);  \r\n            }\r\n\r\n            if(line_6[3][0] != 0.0)\r\n            {\r\n                k = (float(line_6[3][1]) - float(line_6[2][3]))/(float(line_6[3][0]) - float(line_6[2][2]));\r\n                b = float(line_6[3][1]) - k * float(line_6[3][0]);  \r\n            }\r\n\r\n            if(line_6[3][2] != 0.0)\r\n            {\r\n                k = (float(line_6[3][3]) - float(line_6[3][1]))/(float(line_6[3][2]) - float(line_6[3][0]));\r\n                b = float(line_6[3][3]) - k * float(line_6[3][2]);  \r\n            }\r\n\r\n            x = colorSample.a;\r\n            colorSample.a = (k * x + b) / 255.0;\r\n\r\n            colorSample.rgb = colorSample.rgb * (1.0 - accumulatedAlpha);\r\n            accumulatedAlpha = accumulatedAlpha + colorSample.a - accumulatedAlpha * colorSample.a;\r\n            \r\n            if(accumulatedAlpha != 0.0 )\r\n            {\r\n                accumulatedAlpha = 1.0;\r\n            }\r\n            \r\n            gl_FragColor  = vec4(colorSample.rgb, accumulatedAlpha);\r\n\r\n        #endif\r\n    }    \r\n    `\r\n}\r\n\r\n/**\r\n * 体数据绘制曲面shader\r\n * @type {{}}\r\n */\r\nconst GLSL_VOLUME_SURFACE = {\r\n    filterVertexShaderPass: `\r\n    varying vec4 worldPos;\r\n\r\n    attribute float batchId;\r\n    attribute vec3 position3DHigh;\r\n    attribute vec3 position3DLow;\r\n\r\n    vec4 czm_translateRelativeToEye2(vec3 high, vec3 low)\r\n    {\r\n        vec3 highDifference = high - czm_encodedCameraPositionMCHigh;\r\n        vec3 lowDifference = low - czm_encodedCameraPositionMCLow;\r\n        return vec4(highDifference + lowDifference, 1.0);\r\n    }\r\n\r\n    void main()\r\n    {\r\n        vec4 p = czm_translateRelativeToEye2(position3DHigh, position3DLow);\r\n        gl_Position = czm_modelViewProjectionRelativeToEye * p;\r\n\r\n        vec3 pos = position3DHigh + position3DLow;\r\n        worldPos = czm_model * vec4(pos, 1.0);\r\n    }\r\n    `,\r\n    filterFragmentShaderPass: `\r\n    #line 0\r\n    varying vec4 worldPos;\r\n\r\n    const int MAX_STEPS = 200;\r\n    const float steps = 200.0;\r\n    const float alphaCorrection = 0.50;\r\n    const float zDataSliceNumber = 63.0;\r\n\r\n    vec3 mintex = vec3(texmin_6.x, texmin_6.y, texmin_6.z);\r\n    vec3 maxtex = vec3(texmax_7.x, texmax_7.y, texmax_7.z);\r\n    \r\n    /// 切片列数\r\n    const int SliceNumX = 8;\r\n    /// 切片行数\r\n    const int SliceNumY = 8;\r\n    /// 总切片数\r\n    const int SliceCount = SliceNumY * SliceNumX;\r\n\r\n    /// \r\n    const float SliceNumXf = float(SliceNumX);\r\n    const float SliceNumYf = float(SliceNumY);\r\n    const float SliceCountf = float(SliceCount);\r\n\r\n    /// 切片的宽高\r\n    const float SliceWidth  = 1.0 / SliceNumXf;\r\n    const float SliceHeight = 1.0 / SliceNumYf;\r\n    \r\n    vec2 points[8];\r\n    void initPoints()\r\n    {\r\n        points[0] = vec2(line_9[0][0],line_9[0][1]);\r\n        points[1] = vec2(line_9[0][2],line_9[0][3]);\r\n        points[2] = vec2(line_9[1][0],line_9[1][1]);\r\n        points[3] = vec2(line_9[1][2],line_9[1][3]);\r\n        points[4] = vec2(line_9[2][0],line_9[2][1]);\r\n        points[5] = vec2(line_9[2][2],line_9[2][3]);\r\n        points[6] = vec2(line_9[3][0],line_9[3][1]);\r\n        points[7] = vec2(line_9[3][2],line_9[3][3]);\r\n    }\r\n\r\n    // Z方向-256层体数据变为64层体数据\r\n    vec4 sampleAs3DTexture( vec3 texCoord )\r\n    {\r\n        /// 大于等于1\r\n        if (any(greaterThanEqual(texCoord, maxtex))) return vec4(0);\r\n        /// 小于0\r\n        if (any(lessThan(texCoord, mintex))) return vec4(0);\r\n\r\n\r\n        /// 计算在第几个切片，加0.5便于计算\r\n        float slice = texCoord.z * SliceCountf + 0.5;\r\n        float slice_int = floor(slice);\r\n        float slice_dot = slice - slice_int;\r\n\r\n        ///\r\n        float slice_n1 = slice_int - 1.0, slice_n2 = slice_int;\r\n        if (slice_int == 0.0) slice_n1 = 0.0;\r\n        if (slice_int == SliceCountf) slice_n2 = SliceCountf - 1.0;\r\n\r\n        /// \r\n        //texCoord.y = 1.0 - texCoord.y;\r\n\r\n        //The Z slices are stored in a matrix of 16x16 of Z slices.\r\n        //The original UV coordinates have to be rescaled by the tile numbers in each row and column.\r\n        texCoord.x /= float(SliceNumX);\r\n        texCoord.y /= float(SliceNumY);\r\n\r\n        ///\r\n        vec2 texcoord1 = texCoord.xy;\r\n        vec2 texcoord2 = texCoord.xy;\r\n        //Add an offset to the original UV coordinates depending on the row and column number.\r\n        texcoord1.x += mod(slice_n1, SliceNumXf) * SliceWidth;\r\n        texcoord1.y += (SliceNumYf - floor(slice_n1 / SliceNumXf) - 1.0) * SliceHeight;\r\n\r\n        texcoord2.x += mod(slice_n2, SliceNumXf) * SliceWidth;\r\n        texcoord2.y += (SliceNumYf - floor(slice_n2 / SliceNumXf) - 1.0) * SliceHeight;\r\n\r\n        //texcoord1.y = 1.0 - texcoord1.y;\r\n        //texcoord2.y = 1.0 - texcoord2.y;\r\n\r\n        /// 分别在两个切片上进行纹理采样\r\n        vec4 color1 = texture2D( cubeTex_0, texcoord1 );\r\n        vec4 color2 = texture2D( cubeTex_0, texcoord2 );\r\n\r\n        /// 混合颜色\r\n        vec4 colormix = mix(color1, color2, slice_dot);\r\n        //vec4 colormix = color1;\r\n\r\n        /// 对色表进行采样\r\n        colormix.rgb = texture2D(transferTex_1, vec2(colormix.a, 1.0)).rgb;\r\n\r\n        ///\r\n        return colormix;\r\n    }\r\n\r\n    //cesium.js中世界坐标转经纬度坐标算法移植\r\n    vec3 xyz2lnlt( float x, float y, float z)\r\n    {\r\n        vec3 oneOverRadii = vec3(1.0 / 6378137.0, 1.0 / 6378137.0, 1.0 / 6356752.3142451793);\r\n        vec3 oneOverRadiiSquared = vec3(1.0 / (6378137.0 * 6378137.0), 1.0 / (6378137.0 * 6378137.0), 1.0 / (6356752.3142451793 * 6356752.3142451793));\r\n        float centerToleranceSquared = 0.1;\r\n\r\n        vec3 p,n,h;\r\n        //第一步：缩放至标准椭球表面\r\n        float squaredNorm = x * x * oneOverRadii.x * oneOverRadii.x +  y * y * oneOverRadii.y * oneOverRadii.y + z * z * oneOverRadii.z * oneOverRadii.z;\r\n        float ratio = sqrt(1.0 / squaredNorm);\r\n        vec3 intersection = vec3(x, y, z) * ratio;\r\n        p = intersection;\r\n\r\n        // //第二步：\r\n        // //归一化,计算高程参数h\r\n        n.x = p.x * oneOverRadiiSquared.x;\r\n        n.y = p.y * oneOverRadiiSquared.y;\r\n        n.z = p.z * oneOverRadiiSquared.z;\r\n        vec3 normal = normalize(n);\r\n\r\n        h.x = x - p.x;\r\n        h.y = y - p.y;\r\n        h.z = z - p.z;\r\n\r\n        float L = degrees(atan(normal.y,normal.x));\r\n        float B  =degrees(asin(normal.z));\r\n        float H = sign(h.x * x + h.y * y + h.z * z) * sqrt(h.x * h.x + h.y * h.y + h.z * h.z);\r\n\r\n        return vec3(L, B, H);\r\n    }\r\n    \r\n    void main( void ) {\r\n\r\n        initPoints();\r\n\r\n        vec3 dir = worldPos.xyz - czm_viewerPositionWC.xyz ; \r\n        float delta = recDiagonal_8 * 2.0 / steps;\r\n        vec3 deltaDirection = normalize(dir) * delta;\r\n    \r\n        vec3 currentPosition = worldPos.xyz;\r\n        \r\n        vec4 accumulatedColor = vec4(0.0);\r\n        float accumulatedAlpha = 0.0;\r\n        \r\n        vec4 colorSample;\r\n        float alphaSample;\r\n    #define TEST 0\r\n\r\n    #if TEST\r\n        gl_FragColor = sampleAs3DTexture( currentPosition );\r\n\r\n    #else\r\n        for(int i = 0; i < MAX_STEPS; i++)\r\n        {\r\n            vec3 geo = xyz2lnlt(currentPosition.x, currentPosition.y, currentPosition.z);\r\n            geo.x = (geo.x - boxmin_4.x) / box_3.x;\r\n            geo.y = (geo.y - boxmin_4.y) / box_3.y;\r\n            geo.z = (geo.z - boxmin_4.z) / box_3.z;\r\n\r\n            //Get the voxel intensity value from the 3D texture.    \r\n            colorSample = sampleAs3DTexture( geo );\r\n        \r\n\r\n            //////////////////////////////////////////////////////////////////////////\r\n            float k,b,x;\r\n\r\n            x = colorSample.a;\r\n            vec2 point0 = points[0];\r\n            for(int i = 1;i < 8;i++){\r\n                vec2 point1 = points[i];\r\n                if(x < point1.x){\r\n                    k = (point1.y - point0.y) / (point1.x - point0.x);\r\n                    b = point1.y - k * point1.x;\r\n                    colorSample.a = k * x + b;\r\n                    break;\r\n                }\r\n                point0 = point1;\r\n            }\r\n            \r\n            #if 0\r\n                accumulatedColor.rgb = accumulatedColor.rgb * (accumulatedAlpha) + colorSample.rgb * (1.0 - accumulatedAlpha);\r\n                accumulatedAlpha = accumulatedAlpha + colorSample.a - accumulatedAlpha * colorSample.a;\r\n            #else\r\n            //Allow the alpha correction customization\r\n            alphaSample = colorSample.a * alphaCorrection;\r\n\r\n            //Perform the composition.\r\n            accumulatedColor += (1.0 - accumulatedAlpha) * colorSample * alphaSample;\r\n            \r\n            //Store the alpha accumulated so far.\r\n            accumulatedAlpha += (1.0 - accumulatedAlpha) * alphaSample;\r\n            #endif\r\n            \r\n            //Advance the ray.\r\n            currentPosition += deltaDirection;\r\n                      \r\n            //If the length traversed is more than the ray length, or if the alpha accumulated reaches 1.0 then exit.\r\n            if(accumulatedAlpha > 1.0 )break;\r\n\r\n        }\r\n\r\n        gl_FragColor  = vec4(accumulatedColor.rgb, accumulatedAlpha);\r\n    #endif\r\n    }             \r\n    `,\r\n    vertexShaderPass: `\r\nvarying vec4 worldPos;\r\n\r\nattribute float batchId;\r\nattribute vec3 position3DHigh;\r\nattribute vec3 position3DLow;\r\n\r\nvec4 czm_translateRelativeToEye2(vec3 high, vec3 low)\r\n{\r\n  vec3 highDifference = high - czm_encodedCameraPositionMCHigh;\r\n  vec3 lowDifference = low - czm_encodedCameraPositionMCLow;\r\n  return vec4(highDifference + lowDifference, 1.0);\r\n}\r\n\r\nvoid main()\r\n{\r\n  vec4 p = czm_translateRelativeToEye2(position3DHigh, position3DLow);\r\n\r\n  //vec4 p = czm_computePosition();\r\n  gl_Position = czm_modelViewProjectionRelativeToEye * p;\r\n\r\n  vec3 pos = position3DHigh + position3DLow;\r\n  //czm_model\r\n  //一种GLSL一致变量 表示4x4模型变换矩阵，可将模型坐标转换为世界坐标。\r\n  worldPos = czm_model * vec4(pos, 1.0);\r\n}\r\n\r\n    `,\r\n    fragmentShaderPass: `\r\n    varying vec4 worldPos;\r\n\r\nconst int MAX_STEPS = 200;\r\nconst float steps = 200.0;\r\nconst float alphaCorrection  = 0.50;\r\nconst float zDataSliceNumber = 63.0;\r\n\r\nvec3 mintex = vec3(texmin_6.x, texmin_6.y, texmin_6.z);\r\nvec3 maxtex = vec3(texmax_7.x, texmax_7.y, texmax_7.z);\r\n\r\n/// 切片列数\r\nconst int SliceNumX = 8;\r\n/// 切片行数\r\nconst int SliceNumY = 8;\r\n/// 总切片数\r\nconst int SliceCount = SliceNumY * SliceNumX;\r\n\r\n/// \r\nconst float SliceNumXf = float(SliceNumX);\r\nconst float SliceNumYf = float(SliceNumY);\r\nconst float SliceCountf = float(SliceCount);\r\n\r\n/// 切片的宽高\r\nconst float SliceWidth  = 1.0 / SliceNumXf;\r\nconst float SliceHeight = 1.0 / SliceNumYf;\r\n\r\n// Z方向256层体数据变为64层体数据\r\nvec4 sampleAs3DTexture( vec3 texCoord )\r\n{\r\n    /// 大于等于1\r\n    if (any(greaterThanEqual(texCoord, maxtex))) return vec4(0);\r\n    /// 小于0\r\n    if (any(lessThan(texCoord, mintex))) return vec4(0);\r\n\r\n\r\n    /// 计算在第几个切片，加0.5便于计算\r\n    float slice = texCoord.z * SliceCountf + 0.5;\r\n    float slice_int = floor(slice);\r\n    float slice_dot = slice - slice_int;\r\n\r\n    ///\r\n    float slice_n1 = slice_int - 1.0, slice_n2 = slice_int;\r\n    if (slice_int == 0.0) slice_n1 = 0.0;\r\n    if (slice_int == SliceCountf) slice_n2 = SliceCountf - 1.0;\r\n\r\n    /// \r\n    //texCoord.y = 1.0 - texCoord.y;\r\n\r\n    //The Z slices are stored in a matrix of 16x16 of Z slices.\r\n    //The original UV coordinates have to be rescaled by the tile numbers in each row and column.\r\n    texCoord.x /= float(SliceNumX);\r\n    texCoord.y /= float(SliceNumY);\r\n\r\n    ///\r\n    vec2 texcoord1 = texCoord.xy;\r\n    vec2 texcoord2 = texCoord.xy;\r\n    //Add an offset to the original UV coordinates depending on the row and column number.\r\n    texcoord1.x += mod(slice_n1, SliceNumXf) * SliceWidth;\r\n    texcoord1.y += (SliceNumYf - floor(slice_n1 / SliceNumXf) - 1.0) * SliceHeight;\r\n\r\n    texcoord2.x += mod(slice_n2, SliceNumXf) * SliceWidth;\r\n    texcoord2.y += (SliceNumYf - floor(slice_n2 / SliceNumXf) - 1.0) * SliceHeight;\r\n\r\n    //texcoord1.y = 1.0 - texcoord1.y;\r\n    //texcoord2.y = 1.0 - texcoord2.y;\r\n\r\n    /// 分别在两个切片上进行纹理采样\r\n    vec4 color1 = texture2D( cubeTex_0, texcoord1 );\r\n    vec4 color2 = texture2D( cubeTex_0, texcoord2 );\r\n\r\n    /// 混合颜色\r\n    vec4 colormix = mix(color1, color2, slice_dot);\r\n    //vec4 colormix = color1;\r\n\r\n    /// 对色表进行采样\r\n    colormix.rgb = texture2D(transferTex_1, vec2(colormix.a, 1.0)).rgb;\r\n\r\n    ///\r\n    return colormix;\r\n} \r\n\r\n//cesium.js中笛卡尔坐标转经纬度坐标算法移植\r\nvec3 xyz2lnlt( float x, float y, float z)\r\n{\r\n    vec3 oneOverRadii = vec3(1.0 / 6378137.0, 1.0 / 6378137.0, 1.0 / 6356752.3142451793);\r\n    vec3 oneOverRadiiSquared = vec3(1.0 / (6378137.0 * 6378137.0), 1.0 / (6378137.0 * 6378137.0), 1.0 / (6356752.3142451793 * 6356752.3142451793));\r\n    float centerToleranceSquared = 0.1;\r\n\r\n    vec3 p,n,h;\r\n    //第一步：缩放至标准椭球表面\r\n    float squaredNorm = x * x * oneOverRadii.x * oneOverRadii.x +  y * y * oneOverRadii.y * oneOverRadii.y + z * z * oneOverRadii.z * oneOverRadii.z;\r\n    float ratio = sqrt(1.0 / squaredNorm);\r\n    vec3 intersection = vec3(x, y, z) * ratio;\r\n    p = intersection;\r\n\r\n    // //第二步：\r\n    // //归一化,计算高程参数h\r\n    n.x = p.x * oneOverRadiiSquared.x;\r\n    n.y = p.y * oneOverRadiiSquared.y;\r\n    n.z = p.z * oneOverRadiiSquared.z;\r\n    vec3 normal = normalize(n);\r\n\r\n    h.x = x - p.x;\r\n    h.y = y - p.y;\r\n    h.z = z - p.z;\r\n\r\n    float L = degrees(atan(normal.y,normal.x));\r\n    float B  =degrees(asin(normal.z));\r\n    float H = sign(h.x * x + h.y * y + h.z * z) * sqrt(h.x * h.x + h.y * h.y + h.z * h.z);\r\n\r\n    return vec3(L, B, H);\r\n}\r\n\r\n//公式法：笛卡尔坐标转经纬度坐标\r\n// vec3 xyz2lnlt( float x, float y, float z)\r\n//     {\r\n//         float Lr = atan(y, x);\r\n//         float c = sqrt(x * x + y * y + z * z);\r\n//         float Br = asin(z / c);\r\n//         float lon = degrees(Lr);\r\n//         float lat = degrees(Br);\r\n//         return vec3(lon, lat, c - 6378137.0);\r\n//     }\r\n\r\n/// 主函数 \r\nvoid main( void ) { \r\n    vec3 dir = worldPos.xyz - czm_viewerPositionWC.xyz ; \r\n    float delta = recDiagonal_8 * 2.0 / steps;\r\n    vec3 deltaDirection = normalize(dir) * delta;\r\n\r\n    vec3 currentPosition = worldPos.xyz;\r\n    \r\n    vec4 accumulatedColor = vec4(0.0);\r\n    float accumulatedAlpha = 0.0;\r\n    \r\n    vec4 colorSample;\r\n    float alphaSample;\r\n\r\n\r\n    for(int i = 0; i < MAX_STEPS; ++i)\r\n    {\r\n        vec3 geo = xyz2lnlt(currentPosition.x, currentPosition.y, currentPosition.z);\r\n\r\n        geo.x = (geo.x - boxmin_4.x) / box_3.x;\r\n        geo.y = (geo.y - boxmin_4.y) / box_3.y;\r\n        geo.z = (geo.z - boxmin_4.z) / box_3.z;\r\n\r\n        //Get the voxel intensity value from the 3D texture.    \r\n        colorSample = sampleAs3DTexture( geo );\r\n\r\n        #if 0\r\n            //accumulatedColor.rgb = accumulatedColor.rgb * (accumulatedAlpha) + colorSample.rgb * (1.0 - accumulatedAlpha);\r\n            //accumulatedAlpha = accumulatedAlpha + colorSample.a - accumulatedAlpha * colorSample.a;\r\n            accumulatedColor.rgb = colorSample.rgb;\r\n        #else\r\n            //Allow the alpha correction customization\r\n            alphaSample = colorSample.a * alphaCorrection;\r\n\r\n            //Perform the composition.\r\n            accumulatedColor += (1.0 - accumulatedAlpha) * colorSample * alphaSample;\r\n            \r\n            //Store the alpha accumulated so far.\r\n            accumulatedAlpha += (1.0 - accumulatedAlpha) * alphaSample;\r\n        #endif\r\n        \r\n        //Advance the ray.\r\n        currentPosition += deltaDirection;\r\n        //accumulatedLength += deltaDirectionLength;\r\n                    \r\n        //If the length traversed is more than the ray length, or if the alpha accumulated reaches 1.0 then exit.\r\n        if(accumulatedAlpha > 1.0 )break;\r\n    }\r\n\r\n    //float v = float(c) / 256.0;\r\n    //gl_FragColor  = vec4(v,v,v,1.0); \r\n    gl_FragColor = vec4(accumulatedColor.rgb, accumulatedAlpha);\r\n    //gl_FragColor = vec4(accumulatedColor.rgb, 1.0);\r\n}        \r\n    `,\r\n    sliceVertexShaderPass: `\r\n    varying vec4 worldPos;\r\n    \r\n    attribute float batchId;\r\n    attribute vec3 position3DHigh;\r\n    attribute vec3 position3DLow;\r\n\r\n    vec4 czm_translateRelativeToEye2(vec3 high, vec3 low)\r\n    {\r\n        vec3 highDifference = high - czm_encodedCameraPositionMCHigh;\r\n        vec3 lowDifference = low - czm_encodedCameraPositionMCLow;\r\n        return vec4(highDifference + lowDifference, 1.0);\r\n    }\r\n\r\n    void main()\r\n    {\r\n        vec4 p = czm_translateRelativeToEye2(position3DHigh, position3DLow);\r\n        gl_Position = czm_modelViewProjectionRelativeToEye * p;\r\n\r\n        vec3 pos = position3DHigh + position3DLow;\r\n        worldPos = czm_model * vec4(pos, 1.0);\r\n    }\r\n    `,\r\n    sliceFragmentShaderPass: `\r\n    varying vec4 worldPos;\r\n\r\n    const int MAX_STEPS = 200;\r\n    const float zDataSliceNumber = 63.0;\r\n\r\n    /// 切片列数\r\n    const int SliceNumX = 8;\r\n    /// 切片行数\r\n    const int SliceNumY = 8;\r\n    /// 总切片数\r\n    const int SliceCount = SliceNumY * SliceNumX;\r\n\r\n    /// \r\n    const float SliceNumXf = float(SliceNumX);\r\n    const float SliceNumYf = float(SliceNumY);\r\n    const float SliceCountf = float(SliceCount);\r\n\r\n    /// 切片的宽高\r\n    const float SliceWidth  = 1.0 / SliceNumXf;\r\n    const float SliceHeight = 1.0 / SliceNumYf;\r\n\r\n    vec3 mintex = vec3(texmin_7.x, texmin_7.y, texmin_7.z);\r\n    vec3 maxtex = vec3(texmax_8.x, texmax_8.y, texmax_8.z);\r\n\r\n    vec2 points[8];\r\n    void initPoints()\r\n    {\r\n        points[0] = vec2(line_6[0][0],line_6[0][1]);\r\n        points[1] = vec2(line_6[0][2],line_6[0][3]);\r\n        points[2] = vec2(line_6[1][0],line_6[1][1]);\r\n        points[3] = vec2(line_6[1][2],line_6[1][3]);\r\n        points[4] = vec2(line_6[2][0],line_6[2][1]);\r\n        points[5] = vec2(line_6[2][2],line_6[2][3]);\r\n        points[6] = vec2(line_6[3][0],line_6[3][1]);\r\n        points[7] = vec2(line_6[3][2],line_6[3][3]);\r\n    }\r\n\r\n    // Z方向-256层体数据变为64层体数据\r\n    vec4 sampleAs3DTexture( vec3 texCoord )\r\n    {\r\n        /// 大于等于1\r\n        if (any(greaterThanEqual(texCoord, maxtex))) return vec4(0);\r\n        /// 小于0\r\n        if (any(lessThan(texCoord, mintex))) return vec4(0);\r\n\r\n\r\n        /// 计算在第几个切片，加0.5便于计算\r\n        float slice = texCoord.z * SliceCountf + 0.5;\r\n        float slice_int = floor(slice);\r\n        float slice_dot = slice - slice_int;\r\n\r\n        ///\r\n        float slice_n1 = slice_int - 1.0, slice_n2 = slice_int;\r\n        if (slice_int == 0.0) slice_n1 = 0.0;\r\n        if (slice_int == SliceCountf) slice_n2 = SliceCountf - 1.0;\r\n\r\n        /// \r\n        //texCoord.y = 1.0 - texCoord.y;\r\n\r\n        //The Z slices are stored in a matrix of 16x16 of Z slices.\r\n        //The original UV coordinates have to be rescaled by the tile numbers in each row and column.\r\n        texCoord.x /= float(SliceNumX);\r\n        texCoord.y /= float(SliceNumY);\r\n\r\n        ///\r\n        vec2 texcoord1 = texCoord.xy;\r\n        vec2 texcoord2 = texCoord.xy;\r\n        //Add an offset to the original UV coordinates depending on the row and column number.\r\n        texcoord1.x += mod(slice_n1, SliceNumXf) * SliceWidth;\r\n        texcoord1.y += (SliceNumYf - floor(slice_n1 / SliceNumXf) - 1.0) * SliceHeight;\r\n\r\n        texcoord2.x += mod(slice_n2, SliceNumXf) * SliceWidth;\r\n        texcoord2.y += (SliceNumYf - floor(slice_n2 / SliceNumXf) - 1.0) * SliceHeight;\r\n\r\n        //texcoord1.y = 1.0 - texcoord1.y;\r\n        //texcoord2.y = 1.0 - texcoord2.y;\r\n\r\n        /// 分别在两个切片上进行纹理采样\r\n        vec4 color1 = texture2D( cubeTex_0, texcoord1 );\r\n        vec4 color2 = texture2D( cubeTex_0, texcoord2 );\r\n\r\n        /// 混合颜色\r\n        vec4 colormix = mix(color1, color2, slice_dot);\r\n        //vec4 colormix = color1;\r\n\r\n        /// 对色表进行采样\r\n        colormix.rgb = texture2D(transferTex_1, vec2(colormix.a, 1.0)).rgb;\r\n\r\n        ///\r\n        return colormix;\r\n    }\r\n\r\n//cesium.js中笛卡尔坐标转经纬度坐标算法移植\r\nvec3 xyz2lnlt( float x, float y, float z)\r\n{\r\n    vec3 oneOverRadii = vec3(1.0 / 6378137.0, 1.0 / 6378137.0, 1.0 / 6356752.3142451793);\r\n    vec3 oneOverRadiiSquared = vec3(1.0 / (6378137.0 * 6378137.0), 1.0 / (6378137.0 * 6378137.0), 1.0 / (6356752.3142451793 * 6356752.3142451793));\r\n    float centerToleranceSquared = 0.1;\r\n\r\n    vec3 p,n,h;\r\n    //第一步：缩放至标准椭球表面\r\n    float squaredNorm = x * x * oneOverRadii.x * oneOverRadii.x +  y * y * oneOverRadii.y * oneOverRadii.y + z * z * oneOverRadii.z * oneOverRadii.z;\r\n    float ratio = sqrt(1.0 / squaredNorm);\r\n    vec3 intersection = vec3(x, y, z) * ratio;\r\n    p = intersection;\r\n\r\n    // //第二步：\r\n    // //归一化,计算高程参数h\r\n    n.x = p.x * oneOverRadiiSquared.x;\r\n    n.y = p.y * oneOverRadiiSquared.y;\r\n    n.z = p.z * oneOverRadiiSquared.z;\r\n    vec3 normal = normalize(n);\r\n\r\n    h.x = x - p.x;\r\n    h.y = y - p.y;\r\n    h.z = z - p.z;\r\n\r\n    float L = degrees(atan(normal.y,normal.x));\r\n    float B  =degrees(asin(normal.z));\r\n    float H = sign(h.x * x + h.y * y + h.z * z) * sqrt(h.x * h.x + h.y * h.y + h.z * h.z);\r\n    //float H = sqrt(x * x + y * y + z * z) - 6378137.0;\r\n\r\n    return vec3(L, B, H);\r\n}\r\n\r\n    void main( void ) {\r\n\r\n        initPoints(); \r\n\r\n        vec3 currentPosition = worldPos.xyz;\r\n        \r\n        vec4 colorSample;\r\n        float accumulatedAlpha = 0.0;\r\n\r\n        vec3 geo = xyz2lnlt(currentPosition.x, currentPosition.y, currentPosition.z);\r\n        geo.x = (geo.x - boxmin_4.x) / box_3.x;\r\n        geo.y = (geo.y - boxmin_4.y) / box_3.y;\r\n        geo.z = (geo.z - boxmin_4.z) / box_3.z;\r\n\r\n        colorSample  = sampleAs3DTexture(geo);\r\n\r\n        //////////////////////////////////////////////////////////////////////////\r\n        float k,b,x;\r\n\r\n        x = colorSample.a;\r\n        vec2 point0 = points[0];\r\n        for(int i = 1;i < 8;i++){\r\n            vec2 point1 = points[i];\r\n            if(x < point1.x){\r\n                k = (point1.y - point0.y) / (point1.x - point0.x);\r\n                b = point1.y - k * point1.x;\r\n                colorSample.a = k * x + b;\r\n                break;\r\n            }\r\n            point0 = point1;\r\n        }\r\n\r\n        colorSample.rgb = colorSample.rgb * (1.0 - accumulatedAlpha);\r\n        accumulatedAlpha = accumulatedAlpha + colorSample.a - accumulatedAlpha * colorSample.a;\r\n        \r\n        gl_FragColor  = vec4(colorSample.rgb, accumulatedAlpha);\r\n    }\r\n    `\r\n}\r\n\r\n/**\r\n *\r\n * @interface 交互工具必须实现此接口\r\n * @see GridLine\r\n * @see SliceTool\r\n * @see RectPlane\r\n * @see MapVolume\r\n */\r\nclass _Common{\r\n    constructor(){\r\n\r\n    }\r\n    update(){}\r\n    clean(){}\r\n    binding(){}\r\n}\r\n/**\r\n * 栅格线工具\r\n *\r\n * ------------------------to\r\n * |                        |\r\n * |                        |\r\n * |                        |\r\n * |                        |\r\n * |                        |\r\n * from---------------------\r\n * @author flake\r\n * @example new GridLine(map3DView,{longitude:100,latitude:25,height:0},{longitude:120.5,latitude:32.5,height:0})\r\n */\r\n\r\nclass GridLine extends _Common{\r\n    constructor(map3dView, from, to, opt) {\r\n        super()\r\n        let default_opt = {\r\n            stepX: 1,    //经度步长（度）\r\n            stepY: 1,    //纬度步长（度）\r\n            stepZ: 100,  //高度步长（米）\r\n            useOrigin:false, // 是否使用原始的高度参考，为true的时候，实际高度会采用缩放高度\r\n        }\r\n        this.map3dView = map3dView      //公司封装之后的视图对象，类型为Init3DView\r\n        this.Cesium = Cesium\r\n        this.viewer = map3dView.cesium.viewer //对应Cesium框架内的Viewer类实例 ，类型为Viewer\r\n        this.scene = map3dView.cesium.scene //对应Cesium框架内的Scene类实例 ，类型为Scene\r\n        this.from = from\r\n        this.to = to\r\n        this.opt = Object.assign(default_opt, opt)\r\n        this.xSteps = []\r\n        this.ySteps = []\r\n        this.zSteps = []\r\n        this.gridLine = []\r\n        this.scale = [1,1,1]\r\n        this.tool = new ConvertTool(this.Cesium)\r\n        this.entityTool = new EntityTool(this.Cesium, this.viewer)\r\n        // 设置默认样式\r\n        if(this.opt.style) this.style = this.opt.style\r\n        this._show = true\r\n        this.init()\r\n    }\r\n\r\n    /**\r\n     * get/set 工具样式\r\n     * 配置项详见EntityTool._default\r\n     * @see EntityTool.defaultOpt\r\n     * @return {{lineWidth: number, lineColor: Color}}\r\n     */\r\n    get style(){\r\n        return this.entityTool.getDefault()\r\n    }\r\n    set style(opt){\r\n        this.entityTool.defaultOpt = opt\r\n        this.update()\r\n    }\r\n    /**\r\n     * 更新数据\r\n     */\r\n    update(from = this.from,to = this.to,scale = this.scale){\r\n        this.destroy()\r\n        this.from = from\r\n        this.to = to\r\n        this.scale = scale\r\n        this.init()\r\n        this.show = !!this.show\r\n    }\r\n\r\n    /**\r\n     * 清除【完全清除还是隐藏功能待定】\r\n     */\r\n    clean(){\r\n\r\n    }\r\n    init() {\r\n        /// c3类型\r\n        if (this.from instanceof this.Cesium.Cartesian3) {    //这里只是用一个来判断，约定from，to的类型一致\r\n            this.from = this.tool.c3ToCartographicDegrees(this.from)\r\n            this.to = this.tool.c3ToCartographicDegrees(this.to)\r\n        }\r\n        /// Cartographic\r\n        if (this.from instanceof this.Cesium.Cartographic) {\r\n            this.from = this.tool.cartographic2CartographicDegrees(this.from)\r\n            this.to = this.tool.cartographic2CartographicDegrees(this.to)\r\n        }\r\n\r\n        let xmin = this.from.longitude,\r\n            ymin = this.from.latitude,\r\n            xmax = this.to.longitude,\r\n            ymax = this.to.latitude\r\n        this.diff = Math.abs(this.from.height - this.to.height)     //高度差，使用这个属性和实例上的stepZ属性计算z轴的网格\r\n        this.xSteps = this.computeMiddleSpacing(xmin, xmax, this.opt.stepX)\r\n        this.ySteps = this.computeMiddleSpacing(ymin, ymax, this.opt.stepY)\r\n        this.zSteps = (this.diff && this.opt.stepZ) ? this.computeMiddleSpacing(this.from.height, this.to.height, this.opt.stepZ) : []\r\n\r\n        this.createGrid()\r\n    }\r\n\r\n    set show(val) {\r\n        // if (this._show === !!val) {\r\n        //     return this._show\r\n        // }\r\n        this.gridLine.forEach(function (line) {\r\n            line.show = val\r\n        })\r\n        return this._show = !!val\r\n    }\r\n\r\n    get show() {\r\n        return this._show\r\n    }\r\n\r\n    /**\r\n     * 计算中间间距<br>\r\n     *\r\n     * ·    ·    ·    · ·\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     * @param step 步长\r\n     * @example (1,5.5,1) => [1,2,3,4,5,5.5]\r\n     */\r\n    computeMiddleSpacing(min, max, step) {\r\n        let arr = [], spacing = max - min\r\n        for (let i = 0; i < spacing / step; i++) {\r\n            arr.push(step * i)\r\n        }\r\n        if (spacing % step !== 0) {       //不是整除的时候 添加差值\r\n            arr.push(spacing)\r\n        }\r\n        return arr\r\n    }\r\n\r\n    createGrid() {\r\n        return this.gridLine = this.gridLine.concat(\r\n            this._vertical(),\r\n            this._justify()\r\n        )\r\n    }\r\n\r\n    /**\r\n     * 竖向栅格（y）\r\n     * @private\r\n     */\r\n    _vertical() {\r\n        let start = this.from,\r\n            entitys = []\r\n        this.xSteps.forEach((stepX, index) => {\r\n            let lines = this.ySteps.map(stepY => {\r\n                let one = this.tool.cartographicAdd(start, {longitude: stepX, latitude: stepY, height: 0})\r\n                // one.height = 0\r\n                return this.tool.c3ByDegrees(one)\r\n            })\r\n            if (index === 0) {\r\n                entitys = entitys.concat(this._verticalZ(lines))\r\n                entitys = entitys.concat(this.entityTool.addPointWithLatitude(lines))\r\n            }\r\n            entitys.push(this.entityTool.addPloyline(lines))\r\n        })\r\n        return entitys\r\n    }\r\n\r\n    /**\r\n     * 横向栅格（x）\r\n     * @private\r\n     */\r\n    _justify() {\r\n        let start = this.from,\r\n            entitys = []\r\n        this.ySteps.forEach((stepY, index) => {\r\n            let lines = this.xSteps.map(stepX => {\r\n                let one = this.tool.cartographicAdd(start, {longitude: stepX, latitude: stepY, height: 0})\r\n                // one.height = 0\r\n                return this.tool.c3ByDegrees(one)\r\n            })\r\n            if (index === 0) {\r\n                entitys = entitys.concat(this._verticalZ(lines))\r\n                entitys = entitys.concat(this.entityTool.addPointWithLongitude(lines))\r\n            }\r\n            entitys.push(this.entityTool.addPloyline(lines))\r\n        })\r\n        return entitys\r\n    }\r\n\r\n    /**\r\n     * 竖向栅格（z）\r\n     * @private\r\n     */\r\n    _verticalZ(baseLine) {\r\n        let entitys = []\r\n        let scale = this.opt.useOrigin ? this.scale[2] : 1\r\n        this.zSteps.forEach(step => {\r\n            entitys.push(\r\n                this.entityTool.addPloyline(baseLine.map(c3 => {\r\n\r\n                    let cart = this.tool.c3ToCartographic(c3)\r\n                    cart.height += step\r\n                    return this.tool.c3ByRadians(cart)\r\n                }))\r\n            )\r\n\r\n            let cart2 = this.tool.c3ToCartographic(baseLine[0])\r\n            cart2.height += step\r\n\r\n            entitys.push(\r\n                this.entityTool.addSinglePointWithText(this.tool.c3ByRadians(cart2), ((cart2.height/scale).toFixed(1)) + 'm\\n\\n')\r\n            )\r\n\r\n\r\n        })\r\n        return entitys\r\n    }\r\n    destroy(){\r\n        let collection = this.viewer.entities\r\n        this.gridLine.forEach(entity =>{\r\n            collection.remove(entity)\r\n        })\r\n        this.gridLine = []\r\n    }\r\n}\r\n\r\n/**\r\n * 切片工具\r\n * @author flake\r\n * @example new SliceTool(map3DView,{longitude:108.5,latitude:18,height:0},{longitude:119,latitude:27,height:0})\r\n */\r\nclass SliceTool extends _Common{\r\n    constructor(map3dView, from, to, opt) {\r\n        super()\r\n        let default_opt = {\r\n            sliceSize: 20        //分段个数 ，两点之间的曲线polyline和经纬度线圈不重合，采取两点分割成多个点，来近似重合\r\n        }\r\n        this.map3dView = map3dView      //公司封装之后的视图对象，类型为Init3DView\r\n        this.Cesium = Cesium\r\n        this.viewer = map3dView.cesium.viewer //对应Cesium框架内的Viewer类实例 ，类型为Viewer\r\n        this.scene = map3dView.cesium.scene //对应Cesium框架内的Scene类实例 ，类型为Scene\r\n        this.from = from\r\n        this.to = to\r\n        this.opt = Object.assign(default_opt, opt)\r\n        this.tool = new ConvertTool(this.Cesium)\r\n        this.entityTool = new EntityTool(this.Cesium, this.viewer)\r\n\r\n        this._show = true\r\n        this.planes = {\r\n            xoy: null,\r\n            xoz: null,\r\n            yoz: null,\r\n            xoy_offset: 0.5, //表示所处的位置[0-1] 0.5表示在正中间，默认值\r\n            xoz_offset: 0.5,\r\n            yoz_offset: 0.5,\r\n        }\r\n        // 设置默认样式\r\n        if (this.opt.style){\r\n            this.style = this.opt.style\r\n        }else{\r\n            this.init()\r\n        }\r\n\r\n    }\r\n    /**\r\n     * get/set 工具样式\r\n     * 配置项详见EntityTool._default\r\n     * @see EntityTool.defaultOpt\r\n     * @return {{lineWidth: number, lineColor: Color}}\r\n     */\r\n    get style(){\r\n        return this.entityTool.getDefault()\r\n    }\r\n    set style(opt){\r\n        this.entityTool.defaultOpt = opt\r\n        this.destroy()\r\n        this.update()\r\n    }\r\n\r\n    init() {\r\n        //初始化控制工具\r\n        if (SliceControl && !this.sliceControl) this.sliceControl = new SliceControl(this,null,this.opt)\r\n        /// c3类型\r\n        if (this.from instanceof this.Cesium.Cartesian3) {    //这里只是用一个来判断，约定from，to的类型一致\r\n            this.from = this.tool.c3ToCartographicDegrees(this.from)\r\n            this.to = this.tool.c3ToCartographicDegrees(this.to)\r\n        }\r\n        /// Cartographic\r\n        if (this.from instanceof this.Cesium.Cartographic) {\r\n            this.from = this.tool.cartographic2CartographicDegrees(this.from)\r\n            this.to = this.tool.cartographic2CartographicDegrees(this.to)\r\n        }\r\n        this.height = Math.abs(this.to.height - this.from.height)\r\n        //初始化三个面\r\n        this.xoy = this._getScalePoint('xoy', this.planes.xoy_offset)\r\n        this.xoz = this._getScalePoint('xoz', this.planes.xoz_offset)\r\n        this.yoz = this._getScalePoint('yoz', this.planes.yoz_offset)\r\n        this.planes.xoy = (this.entityTool.addPloyline(this.tool.fromDegreesArrayWithHeight(this.xoy)))\r\n        this.planes.xoz = (this.entityTool.addPloyline(this.tool.fromDegreesArrayWithHeight(this.xoz)))\r\n        this.planes.yoz = (this.entityTool.addPloyline(this.tool.fromDegreesArrayWithHeight(this.yoz)))\r\n\r\n        //创建实时更新动画\r\n        this.planes.xoy.polyline.positions = new this.Cesium.CallbackProperty(() => {\r\n            return this.tool.fromDegreesArrayWithHeight(this.xoy)\r\n        }, false)\r\n        this.planes.xoz.polyline.positions = new this.Cesium.CallbackProperty(() => {\r\n            return this.tool.fromDegreesArrayWithHeight(this.xoz)\r\n        }, false)\r\n        this.planes.yoz.polyline.positions = new this.Cesium.CallbackProperty(() => {\r\n            return this.tool.fromDegreesArrayWithHeight(this.yoz)\r\n        }, false)\r\n\r\n        return this.planes\r\n    }\r\n\r\n    update(from = this.from,to = this.to){\r\n        this.destroy()\r\n        this.from = from\r\n        this.to = to\r\n        this.init()\r\n        this.show = !!this.show\r\n    }\r\n    clean(){\r\n\r\n    }\r\n    destroy(){\r\n        let arr = [\"xoy\", \"xoz\", \"yoz\",]\r\n        for(let val of arr){\r\n            this.planes[val] && this.viewer.entities.remove(this.planes[val])\r\n        }\r\n    }\r\n    /**\r\n     * 绑定MapVolume\r\n     * @param vol MapVolume实例\r\n     */\r\n    binding(vol){\r\n        this.vol = vol\r\n    }\r\n    get control() {\r\n        return this.sliceControl\r\n    }\r\n\r\n    /**\r\n     * 使用自定义的sliceControl\r\n     * @param sliceControl\r\n     */\r\n    set control(sliceControl) {\r\n        this.sliceControl.destroy()\r\n        this.sliceControl = sliceControl\r\n    }\r\n\r\n    /**\r\n     * 根据比例获取构建面的经纬度列表\r\n     * @param type 类型【'xoy','yoz','xoz'】分别表示【‘平行于地表的面’，‘垂直于地表的面 南北方向’，‘垂直于地表的面 东西方向’】\r\n     * @param scale 位置比例[0-1]\r\n     * @returns {[]} like [lng,lat,height,lng,lat,height,...]\r\n     * @private\r\n     */\r\n    _getScalePoint(type, scale) {\r\n        let xmin = this.from.longitude,\r\n            ymin = this.from.latitude,\r\n            xmax = this.to.longitude,\r\n            ymax = this.to.latitude,\r\n            zmax = this.to.height,\r\n            zmin = this.from.height,\r\n            target_height = zmin + (zmax - zmin) * scale,\r\n            target_x = xmin + (xmax - xmin) * scale,\r\n            target_y = ymin + (ymax - ymin) * scale\r\n        let sliceSize = this.opt.sliceSize\r\n        //平行于地表的面\r\n        if ('xoy' === type) {\r\n            return [xmin, ymin, target_height,\r\n                ...ConvertTool.expansion([xmin, ymax, target_height], [xmax, ymax, target_height,], sliceSize),\r\n                ...ConvertTool.expansion([xmax, ymin, target_height], [xmin, ymin, target_height,], sliceSize),\r\n            ]\r\n        }\r\n        //垂直于地表的面 南北方向\r\n        if ('yoz' === type) {\r\n            return [target_x, ymin, zmin,\r\n                ...ConvertTool.expansion([target_x, ymin, zmax], [target_x, ymax, zmax,], sliceSize),\r\n                ...ConvertTool.expansion([target_x, ymax, zmin], [target_x, ymin, zmin], sliceSize),\r\n            ]\r\n        }\r\n        //垂直于地表的面 东西方向\r\n        if ('xoz' === type) {\r\n            return [xmin, target_y, zmin,\r\n                ...ConvertTool.expansion([xmin, target_y, zmax], [xmax, target_y, zmax], sliceSize),\r\n                ...ConvertTool.expansion([xmax, target_y, zmin], [xmin, target_y, zmin], sliceSize),\r\n            ]\r\n        }\r\n    }\r\n\r\n    get offset() {\r\n        return this.planes\r\n    }\r\n\r\n    set offset(obj) {\r\n        let types = ['xoy_offset', 'xoz_offset', 'yoz_offset']\r\n\r\n        types.forEach(val => {\r\n            if (val in obj) {\r\n                let v = Math.max(obj[val], 0)\r\n                v = Math.min(obj[val], 1)\r\n                this.planes[val] = v\r\n                this.resetPlane(val, v)\r\n            }\r\n        })\r\n        if(this.vol){\r\n            this.vol.setSlice({\r\n                z:obj[\"xoy_offset\"],\r\n                y:obj[\"xoz_offset\"],\r\n                x:obj[\"yoz_offset\"],\r\n            })\r\n        }\r\n        return this.planes\r\n    }\r\n\r\n    set show(val) {\r\n        // if (this._show === !!val) {\r\n        //     return this._show\r\n        // }\r\n        ['xoy', 'xoz', 'yoz'].forEach(key => {\r\n            this.planes[key].show = val\r\n        })\r\n        if(this.sliceControl){  //隐藏/显示拖动工具\r\n            document.querySelectorAll(\".scroll-control\").forEach(el =>{\r\n                el.style.visibility = !!val ? \"visible\" : \"hidden\"\r\n            })\r\n        }\r\n        return this._show = !!val\r\n    }\r\n\r\n    get show() {\r\n        return this._show\r\n    }\r\n\r\n    resetPlane(type, value) {\r\n        let planeName = type.slice(0, 3)\r\n        this[planeName] = this._getScalePoint(planeName, value)\r\n    }\r\n\r\n    showPlane(plane, show) {\r\n        if (this.planes[plane]) {\r\n            return this.planes[plane].show = show\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 范围切面工具\r\n * @author flake\r\n */\r\nclass RectPlane extends _Common{\r\n    constructor(map3dView, from, to, opt) {\r\n        super()\r\n        let default_opt = {\r\n            sliceSize: 20,        //分段个数 ，两点之间的曲线polyline和经纬度线圈不重合，采取两点分割成多个点，来近似重合\r\n            //show:true,          //加载的时候是否显示\r\n        }\r\n        this.map3dView = map3dView      //公司封装之后的视图对象，类型为Init3DView\r\n        this.Cesium = Cesium\r\n        this.viewer = map3dView.cesium.viewer //对应Cesium框架内的Viewer类实例 ，类型为Viewer\r\n        this.scene = map3dView.cesium.scene //对应Cesium框架内的Scene类实例 ，类型为Scene\r\n        this.from = from\r\n        this.to = to\r\n        this.opt = Object.assign(default_opt, opt)\r\n        this.tool = new ConvertTool(this.Cesium)\r\n        this.entityTool = new EntityTool(this.Cesium, this.viewer)\r\n        this.points = []\r\n\r\n        // 设置默认样式\r\n        if(this.opt.style) this.style = this.opt.style\r\n        this._show = true\r\n        this.planes = {}\r\n        this.init()\r\n    }\r\n    /**\r\n     * get/set 工具样式\r\n     * 配置项详见EntityTool._default\r\n     * @see EntityTool.defaultOpt\r\n     * @return {{lineWidth: number, lineColor: Color}}\r\n     */\r\n    get style(){\r\n        return this.entityTool.getDefault()\r\n    }\r\n    set style(opt){\r\n        this.entityTool.defaultOpt = opt\r\n        this.update()\r\n    }\r\n\r\n    update(from = this.from,to = this.to){\r\n        this.from = from\r\n        this.to = to\r\n        this.destroy()\r\n        this.init()\r\n        this.show = !!this.show\r\n    }\r\n    clean(){\r\n\r\n    }\r\n    /**\r\n     * 绑定MapVolume\r\n     * @param vol MapVolume实例\r\n     */\r\n    binding(vol){\r\n        this.vol = vol\r\n    }\r\n    destroy(){\r\n        let collection = this.viewer.entities\r\n\r\n        for(let key in this.planes){\r\n            collection.remove(this.planes[key])\r\n        }\r\n\r\n        this.points && this.points.forEach(entity => {\r\n            collection.remove(entity)\r\n        })\r\n\r\n        this.planes = {}\r\n        this.points = []\r\n    }\r\n    init() {\r\n        /// c3类型\r\n        if (this.from instanceof this.Cesium.Cartesian3) {    //这里只是用一个来判断，约定from，to的类型一致\r\n            this.from = this.tool.c3ToCartographicDegrees(this.from)\r\n            this.to = this.tool.c3ToCartographicDegrees(this.to)\r\n        }\r\n        /// Cartographic\r\n        if (this.from instanceof this.Cesium.Cartographic) {\r\n            this.from = this.tool.cartographic2CartographicDegrees(this.from)\r\n            this.to = this.tool.cartographic2CartographicDegrees(this.to)\r\n        }\r\n        this.height = Math.abs(this.to.height - this.from.height)\r\n        let result = this._getPoints()\r\n        let ps = this.eightPoint //this._getPoints(this.from,this.to)\r\n\r\n        this.copy_to = this.tool.c3ByDegrees(this.to)\r\n        this.copy_from = this.tool.c3ByDegrees(this.from)\r\n\r\n        this.planes.p_top = this.entityTool.addPloyline([...ConvertTool.expansionC3(ps.$001, ps.$101,this.opt.sliceSize), ...ConvertTool.expansionC3(ps.$111, ps.$011,this.opt.sliceSize), ps.$001])\r\n        this.planes.p_left = this.entityTool.addPloyline([ps.$000, ps.$010, ps.$011, ps.$001, ps.$000])\r\n        this.planes.p_right = this.entityTool.addPloyline([ps.$100, ps.$110, ps.$111, ps.$101, ps.$100])\r\n        this.planes.p_bottom = this.entityTool.addPloyline([...ConvertTool.expansionC3(ps.$000, ps.$100,this.opt.sliceSize), ...ConvertTool.expansionC3(ps.$110, ps.$010,this.opt.sliceSize), ps.$000])\r\n        this.planes.p_front = this.entityTool.addPloyline([...ConvertTool.expansionC3(ps.$000, ps.$100,this.opt.sliceSize), ...ConvertTool.expansionC3(ps.$101, ps.$001,this.opt.sliceSize), ps.$000])\r\n        this.planes.p_behind = this.entityTool.addPloyline([...ConvertTool.expansionC3(ps.$010, ps.$110,this.opt.sliceSize), ...ConvertTool.expansionC3(ps.$111, ps.$011,this.opt.sliceSize), ps.$010])\r\n\r\n        //创建实时更新动画\r\n        this.planes.p_top.polyline.positions = new this.Cesium.CallbackProperty(() => {\r\n            let ps = this.eightPoint\r\n            return [...ConvertTool.expansionC3(ps.$001, ps.$101,this.opt.sliceSize), ...ConvertTool.expansionC3(ps.$111, ps.$011,this.opt.sliceSize), ps.$001]\r\n        }, false)\r\n        this.planes.p_left.polyline.positions = new this.Cesium.CallbackProperty(() => {\r\n            let ps = this.eightPoint\r\n            return [ps.$000, ps.$010, ps.$011, ps.$001, ps.$000]\r\n        }, false)\r\n        this.planes.p_right.polyline.positions = new this.Cesium.CallbackProperty(() => {\r\n            let ps = this.eightPoint\r\n            return [...ConvertTool.expansionC3(ps.$000, ps.$100,this.opt.sliceSize), ...ConvertTool.expansionC3(ps.$110, ps.$010,this.opt.sliceSize), ps.$000]\r\n        }, false)\r\n        this.planes.p_bottom.polyline.positions = new this.Cesium.CallbackProperty(() => {\r\n            let ps = this.eightPoint\r\n            return [...ConvertTool.expansionC3(ps.$000, ps.$100,this.opt.sliceSize), ...ConvertTool.expansionC3(ps.$110, ps.$010,this.opt.sliceSize), ps.$000]\r\n        }, false)\r\n        this.planes.p_front.polyline.positions = new this.Cesium.CallbackProperty(() => {\r\n            let ps = this.eightPoint\r\n            return [...ConvertTool.expansionC3(ps.$000, ps.$100,this.opt.sliceSize), ...ConvertTool.expansionC3(ps.$101, ps.$001,this.opt.sliceSize), ps.$000]\r\n        }, false)\r\n        this.planes.p_behind.polyline.positions = new this.Cesium.CallbackProperty(() => {\r\n            let ps = this.eightPoint\r\n            return [...ConvertTool.expansionC3(ps.$010, ps.$110,this.opt.sliceSize), ...ConvertTool.expansionC3(ps.$111, ps.$011,this.opt.sliceSize), ps.$010]\r\n        }, false)\r\n\r\n        this.points = this.entityTool.addPoint(this.sixPoint)\r\n        this.handler()\r\n        return this.planes\r\n    }\r\n\r\n    /**\r\n     * 获取坐标的8+6个点 ${z}{y}{z}\r\n     *       _________________$111\r\n     *      /               / |\r\n     *     /_______________/  |\r\n     *     |               |  |\r\n     *     |               | /\r\n     * $000|_______________|/\r\n     * @param from this.from\r\n     * @param to this.to\r\n     * @private\r\n     */\r\n    _getPoints(from, to) {\r\n        from = from || this.from\r\n        to = to || this.to\r\n        // let xmin = Math.max(from.longitude,this.from.longitude),\r\n        //     ymin = Math.max(from.latitude,this.from.latitude),\r\n        //     hmin = Math.max(from.height,this.from.height),\r\n        //     xmax = Math.min(to.longitude,this.to.longitude),\r\n        //     ymax = Math.min(to.latitude,this.to.latitude),\r\n        //     hmax = Math.min(to.height,this.to.height),\r\n        let xmin = from.longitude,\r\n            ymin = from.latitude,\r\n            hmin = from.height,\r\n            xmax = to.longitude,\r\n            ymax = to.latitude,\r\n            hmax = to.height,\r\n            half_x = (xmax + xmin) / 2,\r\n            half_y = (ymax + ymin) / 2,\r\n            half_z = (hmax + hmin) / 2\r\n\r\n        let $000 = this._createLLH(xmin, ymin, hmin),\r\n            $100 = this._createLLH(xmax, ymin, hmin),\r\n            $110 = this._createLLH(xmax, ymax, hmin),\r\n            $010 = this._createLLH(xmin, ymax, hmin),\r\n            $001 = this._createLLH(xmin, ymin, hmax),\r\n            $101 = this._createLLH(xmax, ymin, hmax),\r\n            $011 = this._createLLH(xmin, ymax, hmax),\r\n            $111 = this._createLLH(xmax, ymax, hmax),\r\n\r\n            $top = this._createLLH(half_x, half_y, hmax),\r\n            $left = this._createLLH(xmin, half_y, half_z),\r\n            $right = this._createLLH(xmax, half_y, half_z),\r\n            $bottom = this._createLLH(half_x, half_y, hmin),\r\n            $front = this._createLLH(half_x, ymin, half_z),\r\n            $behind = this._createLLH(half_x, ymax, half_z)\r\n\r\n        this.eightPoint = {\r\n            $000,\r\n            $100,\r\n            $110,\r\n            $010,\r\n            $001,\r\n            $101,\r\n            $011,\r\n            $111,\r\n        }\r\n        this.sixPoint = [\r\n            $top,\r\n            $left,\r\n            $right,\r\n            $bottom,\r\n            $front,\r\n            $behind,\r\n        ]\r\n\r\n        return [$001, $101, $111, $011,    //上面\r\n            $000, $100, $110, $010,        //下面\r\n            $top, $left, $right, $bottom, $front, $behind,  //中心点\r\n        ]\r\n    }\r\n\r\n    _setPoints(c3) {\r\n        let point = this.tool.c3ToCartographicDegrees(c3)\r\n        let sub = this.Cesium.Cartesian3.subtract(c3, this.sixPoint[this.movingPointIndex], new this.Cesium.Cartesian3())\r\n        let to, from\r\n\r\n        //max(..min()) min(..max()) 都是为了限定最终计算的点在最大最小范围内，使用case每次只影响一个方向\r\n        switch (this.movingPointIndex) {\r\n            case 0: //上面\r\n                to = this.tool.c3ToCartographicDegrees(this.copy_to)\r\n                to.height = Math.max(Math.min(point.height, this.to.height), this.from.height)\r\n\r\n                this.copy_to = this.tool.c3ByDegrees(to)\r\n                break;\r\n            case 2: //右边\r\n                to = this.tool.c3ToCartographicDegrees(this.copy_to)\r\n                to.longitude = Math.max(Math.min(point.longitude, this.to.longitude), this.from.longitude)\r\n\r\n                this.copy_to = this.tool.c3ByDegrees(to)\r\n                break;\r\n            case 5: //后面\r\n                to = this.tool.c3ToCartographicDegrees(this.copy_to)\r\n                to.latitude = Math.max(Math.min(point.latitude, this.to.latitude), this.from.latitude)\r\n\r\n                this.copy_to = this.tool.c3ByDegrees(to)\r\n                break;\r\n            case 1: //左边\r\n                from = this.tool.c3ToCartographicDegrees(this.copy_from)\r\n                from.longitude = Math.min(Math.max(point.longitude, this.from.longitude), this.to.longitude)\r\n\r\n                this.copy_from = this.tool.c3ByDegrees(from)\r\n                break;\r\n            case 3: //下面\r\n                from = this.tool.c3ToCartographicDegrees(this.copy_from)\r\n                from.height = Math.min(Math.max(point.height, this.from.height), this.to.height)\r\n\r\n                this.copy_from = this.tool.c3ByDegrees(from)\r\n                break;\r\n            case 4: //前面\r\n                from = this.tool.c3ToCartographicDegrees(this.copy_from)\r\n                from.latitude = Math.min(Math.max(point.latitude, this.from.latitude), this.to.latitude)\r\n\r\n                this.copy_from = this.tool.c3ByDegrees(from)\r\n                break;\r\n        }\r\n        //限定移动区域在最大和最小的区域范围之内\r\n        let tmp_from = this.tool.c3ToCartographicDegrees(this.copy_from),\r\n            tmp_to = this.tool.c3ToCartographicDegrees(this.copy_to)\r\n        let eight = this._getPoints(tmp_from, tmp_to)\r\n        this.points.forEach((entity, index) => {\r\n            entity.position = this.sixPoint[index]\r\n        })\r\n        if(this.vol){       //体数据范围更新\r\n            let _from = this.tool.c3ByDegrees(this.from)\r\n\r\n            this.vol.range = {\r\n                minHeight:tmp_from.height,\r\n                minLongitude:Math.abs(ConvertTool.pointPlaneInstance(eight[4],eight[5],_from)),\r\n                maxLatitude:Math.abs(ConvertTool.pointPlaneInstance(eight[7],eight[4],_from)),\r\n                maxHeight:tmp_to.height,\r\n                maxLongitude:Math.abs(ConvertTool.pointPlaneInstance(eight[5],eight[4],_from)),\r\n                minLatitude:Math.abs(ConvertTool.pointPlaneInstance(eight[4],eight[7],_from)),\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建经纬度高度对象\r\n     * @param longitude\r\n     * @param latitude\r\n     * @param height\r\n     * @returns {{longitude: *, latitude: *, height: *}}\r\n     * @private\r\n     */\r\n    _createLLH(longitude, latitude, height) {\r\n        return this.Cesium.Cartesian3.fromDegrees(longitude, latitude, height)\r\n    }\r\n\r\n    handler() {\r\n        this.control = new this.Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);\r\n        let handler = this.control\r\n        let old_time = new Date().getTime()\r\n        let interval = 50\r\n        //左键按下\r\n        handler.setInputAction(e => {\r\n\r\n            this.moving = true\r\n            this.pointDraged = this.viewer.scene.pick(e.position);//选取当前的entity\r\n            this.leftDownFlag = true;\r\n            if (this.pointDraged) {\r\n\r\n                this.movingPointIndex = this.points.indexOf(this.pointDraged.id)  //当前正在被移动的点\r\n                //console.info(this.movingPoint)\r\n                if (this.movingPointIndex > -1)\r\n                    this.viewer.scene.screenSpaceCameraController.enableRotate = false;//锁定相机\r\n            }\r\n        }, this.Cesium.ScreenSpaceEventType.LEFT_DOWN);\r\n\r\n        //左键松开\r\n        handler.setInputAction(e => {\r\n            this.moving = false\r\n            this.leftDownFlag = false;\r\n            if (!this.pointDraged) return\r\n\r\n            this.pointDraged = null;\r\n            this.viewer.scene.screenSpaceCameraController.enableRotate = true;//解锁相机\r\n        }, this.Cesium.ScreenSpaceEventType.LEFT_UP);\r\n\r\n        //鼠标移动\r\n        handler.setInputAction(e => {\r\n            if (Date.now() - old_time < interval) return\r\n            this.hoverHandler(e)\r\n            if (this.leftDownFlag === true && this.pointDraged != null) {\r\n\r\n                let ray = this.viewer.camera.getPickRay(e.endPosition);\r\n                let entity = this.points[this.movingPointIndex]\r\n                if (!entity) return  //movingPointIndex为-1的情况 获取不到entity\r\n                let intersectPoint = this.getPlaneIntersect(entity.position._value, ray)\r\n\r\n                let c3 = this._getAxisCarsian(this.tool.c3ToCartographicDegrees(entity.position._value), intersectPoint)\r\n                //entity.position = c3\r\n\r\n                this._setPoints(c3)\r\n            }\r\n            old_time = Date.now()\r\n        }, this.Cesium.ScreenSpaceEventType.MOUSE_MOVE);\r\n\r\n    }\r\n\r\n    /**\r\n     * 鼠标移入处理 </br>\r\n     *\r\n     * @param e\r\n     */\r\n    hoverHandler(e) {\r\n\r\n        if (this.leftDownFlag) return\r\n        let ray = this.viewer.camera.getPickRay(e.endPosition);\r\n        let entity = this.viewer.scene.pick(e.endPosition);   //选取当前的entity\r\n        if (entity && entity.id && entity.id.point) {\r\n\r\n            entity.id.point.pixelSize = 1.5 * this.style.pointSize\r\n        } else {\r\n            this.points.forEach(point=> {\r\n                point.point.pixelSize = this.style.pointSize\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取平面相交点\r\n     * @param redPoint 参考系原点（红点）\r\n     * @param ray 垂直屏幕的光线\r\n     * @return {\r\n     *     'xOy':c3,\r\n     *     'xOz':c3,\r\n     *     'yOz':c3,\r\n     * }\r\n     */\r\n    getPlaneIntersect(redPoint, ray) {\r\n        let point = redPoint\r\n        // let camera = this.viewer.camera\r\n        let planes = [{\r\n            name: \"xOz\",\r\n            PHR: {\r\n                heading: 90,\r\n                pitch: 0\r\n            }\r\n        }, {\r\n            name: \"yOz\",\r\n            PHR: {\r\n                heading: 0,\r\n                pitch: 0\r\n            }\r\n        }, {\r\n            name: \"xOy\",\r\n            PHR: {\r\n                heading: 0,\r\n                pitch: 90\r\n            }\r\n        }]\r\n\r\n        let result = {}\r\n\r\n        let tmp = new this.Cesium.Cartesian3(0, 0, 0)\r\n        planes.forEach(plane => {\r\n            let next = this.rotate(point, plane.PHR)\r\n            let sub = this.Cesium.Cartesian3.subtract(next, point, tmp)\r\n            let normal = this.Cesium.Cartesian3.normalize(sub, tmp)\r\n            let oOo = this.Cesium.Plane.fromPointNormal(point, normal) //Cesium.Cartesian3.normalize(Cesium.Cartesian3.subtract(next,point))\r\n            let po = this.Cesium.IntersectionTests.rayPlane(ray, oOo)\r\n\r\n            //未产生交点的时候 使用红点\r\n            result[plane.name] = this.tool.c3ToCartographicDegrees(po || point)\r\n\r\n        })\r\n\r\n        return result\r\n    }\r\n\r\n    /**\r\n     * 获取坐标轴（或者xOy面）上的位置\r\n     * @param entity 实体\r\n     * @param oldp 原始点\r\n     * @param newp 新点\r\n     * @returns {*}\r\n     */\r\n    _getAxisCarsian(oldp, intersectPoint) {\r\n\r\n        let newpoint\r\n        //$top, $left, $right, $bottom, $front, $behind\r\n        switch (this.movingPointIndex) {\r\n            case 1:\r\n            case 2:\r\n                newpoint = intersectPoint['xOz']\r\n                return this.Cesium.Cartesian3.fromDegrees(newpoint.longitude, oldp.latitude, oldp.height)\r\n            case 4:\r\n            case 5:\r\n                newpoint = intersectPoint['yOz']\r\n                return this.Cesium.Cartesian3.fromDegrees(oldp.longitude, newpoint.latitude, oldp.height)\r\n            case 0:\r\n            case 3:\r\n                newpoint = intersectPoint[this._viewerPlane()]\r\n                return this.Cesium.Cartesian3.fromDegrees(oldp.longitude, oldp.latitude, newpoint.height)\r\n        }\r\n    }\r\n\r\n    _viewerPlane() {\r\n        let camera = this.viewer.scene.camera\r\n        //135°~315°使用 xOz面\r\n        return camera.heading > 0.75 * Math.PI && camera.heading < 1.75 * Math.PI ? 'xOz' : 'yOz'\r\n    }\r\n\r\n    /**\r\n     * 获取旋转后的的坐标\r\n     *\r\n     *     -----\r\n     *   /       \\\r\n     * |          \\\r\n     * |    ·------|\r\n     * \\          /\r\n     *  ----------\r\n     *\r\n     * @param base 原点\r\n     * @param opt heading and pitch (控制旋转的角度)\r\n     * @return {Cartesian3} c3\r\n     */\r\n    rotate(base, opt) {\r\n        let heading = this.Cesium.Math.toRadians(opt.heading);\r\n        let pitch = this.Cesium.Math.toRadians(opt.pitch);\r\n        let headingPitchRoll = new this.Cesium.HeadingPitchRoll(heading, pitch, 0);\r\n\r\n        let mat4 = this.Cesium.Transforms.headingPitchRollToFixedFrame(base, headingPitchRoll);\r\n\r\n        let vec3 = new this.Cesium.Cartesian3(300, 0, 0);\r\n        return this.Cesium.Matrix4.multiplyByPoint(mat4, vec3, new this.Cesium.Cartesian3());\r\n\r\n    }\r\n\r\n    get show() {\r\n        return this._show;\r\n    }\r\n\r\n    set show(val) {\r\n        // if (this._show === !!val) {\r\n        //     return this._show\r\n        // }\r\n        //隐藏点\r\n        this.points.forEach(entity => {\r\n            entity.show = val\r\n        })\r\n        //隐藏面\r\n        for (let key in this.planes) {\r\n            this.planes[key].show = val\r\n        }\r\n        return this._show = !!val\r\n    }\r\n}\r\n\r\n/**\r\n * 转换工具<br>\r\n * 一些简单的转换工具<br>\r\n * 只依赖核心的Cesium对象\r\n * @author flake\r\n */\r\nclass ConvertTool {\r\n    constructor(Cesium) {\r\n        this.Cesium = Cesium\r\n    }\r\n\r\n    /**\r\n     * 获取一个经纬度坐标【弧度制】\r\n     * @param cartesian c3坐标\r\n     * @return {Cartographic}\r\n     */\r\n    c3ToCartographic(cartesian) {\r\n        return this.Cesium.Cartographic.fromCartesian(cartesian)\r\n    }\r\n\r\n    /**\r\n     * 获取一个经纬度坐标【度】\r\n     * @param cartesian c3坐标\r\n     * @return {Object}\r\n     */\r\n    c3ToCartographicDegrees(cartesian) {\r\n        let cartographic = this.Cesium.Cartographic.fromCartesian(cartesian)\r\n\r\n        return this.cartographic2CartographicDegrees(cartographic)\r\n    }\r\n\r\n    /**\r\n     * 经纬度坐标 弧度转度\r\n     * @param cartographic 经纬度坐标【弧度制】\r\n     * @return {{longitude: Number, latitude: Number, height: Number}}\r\n     */\r\n    cartographic2CartographicDegrees(cartographic) {\r\n        return {\r\n            longitude: this.radians2Degrees(cartographic.longitude),\r\n            latitude: this.radians2Degrees(cartographic.latitude),\r\n            height: cartographic.height,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 得到一个c3坐标\r\n     * @param cartographic 度类型的经度纬度高度\r\n     * @return {Cartesian3}\r\n     */\r\n    c3ByDegrees(cartographic) {\r\n        return this.Cesium.Cartesian3.fromDegrees(cartographic.longitude, cartographic.latitude, cartographic.height)\r\n    }\r\n\r\n    /**\r\n     * 根据经纬度高度数组拿到c3数组\r\n     * @param arr like[lng,lat,height,lng,lat,height,...]\r\n     * @returns {Array}.Cartesian3\r\n     */\r\n    fromDegreesArrayWithHeight(arr) {\r\n        let c3 = []\r\n        for (let i = 0; i < arr.length; i += 3) {\r\n            c3.push(Cesium.Cartesian3.fromDegrees(arr[i], arr[i + 1], arr[i + 2]))\r\n        }\r\n        return c3\r\n    }\r\n\r\n    /**\r\n     * 得到一个c3坐标\r\n     * @param cartographic 弧度类型的经度纬度高度\r\n     * @return {Cartesian3}\r\n     */\r\n    c3ByRadians(cartographic) {\r\n        return this.Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, cartographic.height)\r\n    }\r\n\r\n    /**\r\n     * 弧度转度\r\n     * @param radians 弧度\r\n     * @return {Number}\r\n     */\r\n    radians2Degrees(radians) {\r\n        return this.Cesium.Math.toDegrees(radians)\r\n    }\r\n\r\n    /**\r\n     * 度转弧度\r\n     * @param degrees 度\r\n     * @return {Number}\r\n     */\r\n    degrees2Radians(degrees) {\r\n        return this.Cesium.Math.toRadians(degrees)\r\n    }\r\n\r\n    /**\r\n     * 经纬度相加\r\n     * @param left\r\n     * @param right\r\n     * @return {{longitude: Number, latitude: Number, height: Number}}\r\n     */\r\n    cartographicAdd(left, right) {\r\n        return {\r\n            longitude: left.longitude + right.longitude,\r\n            latitude: left.latitude + right.latitude,\r\n            height: Math.max(left.height, right.height),\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 扩容\r\n     * @param left 左边点\r\n     * @param right 右边点\r\n     * @param size 目标点个数\r\n     * @returns {Array} [lng,lat,height,lng,lat,height,...]\r\n     */\r\n    static expansion(left, right, size) {\r\n        let xStep = (right[0] - left[0]) / size,\r\n            yStep = (right[1] - left[1]) / size,\r\n            zStep = (right[2] - left[2]) / size,\r\n            arr = []\r\n        for (let i = 0; i < size; i++) {\r\n            if (i === size - 1) { //避免计算误差\r\n                arr.push(...right)\r\n            } else {\r\n                arr.push(left[0] + xStep * i, left[1] + yStep * i, left[2] + zStep * i)\r\n            }\r\n        }\r\n\r\n        return arr\r\n    }\r\n    /**\r\n     * 扩容\r\n     * @param left{Cartesian3} 左边点\r\n     * @param right{Cartesian3} 右边点\r\n     * @param size 目标点个数\r\n     * @returns {Array} [lng,lat,height,lng,lat,height,...]\r\n     */\r\n    static expansionC3(p1, p2, size) {\r\n\r\n\r\n        let cartographic1 = Cesium.Cartographic.fromCartesian(p1),\r\n            cartographic2 = Cesium.Cartographic.fromCartesian(p2),\r\n            left = [Cesium.Math.toDegrees(cartographic1.longitude),Cesium.Math.toDegrees(cartographic1.latitude),cartographic1.height],\r\n            right = [Cesium.Math.toDegrees(cartographic2.longitude),Cesium.Math.toDegrees(cartographic2.latitude),cartographic2.height]\r\n\r\n        return Cesium.Cartesian3.fromDegreesArrayHeights(ConvertTool.expansion(left,right,size))\r\n    }\r\n\r\n    /**\r\n     * 计算合并，返回一个最大值的经纬度高度对象\r\n     * @return {{longitude: *, latitude: *, height: *}}\r\n     */\r\n    static mergeMax() {\r\n        let longitude = arguments[0].longitude,\r\n            latitude = arguments[0].latitude,\r\n            height = arguments[0].height\r\n\r\n        for (let i = 0, length = arguments.length; i < length; i++) {\r\n            longitude = Math.max(longitude, arguments[i].longitude)\r\n            latitude = Math.max(latitude, arguments[i].latitude)\r\n            height = Math.max(height, arguments[i].height)\r\n        }\r\n        return {\r\n            longitude,\r\n            latitude,\r\n            height\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 计算合并，返回一个最小值的经纬度高度对象\r\n     * @return {{longitude: *, latitude: *, height: *}}\r\n     */\r\n    static mergeMin() {\r\n        let longitude = arguments[0].longitude,\r\n            latitude = arguments[0].latitude,\r\n            height = arguments[0].height\r\n\r\n        for (let i = 0, length = arguments.length; i < length; i++) {\r\n            longitude = Math.min(longitude, arguments[i].longitude)\r\n            latitude = Math.min(latitude, arguments[i].latitude)\r\n            height = Math.min(height, arguments[i].height)\r\n        }\r\n        return {\r\n            longitude,\r\n            latitude,\r\n            height\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 点面距离计算\r\n     * planePoint1位于面上，planePoint2与planePoint1构成法线\r\n     * 如果距离为正，则该点位于法线方向的半空间中; 如果为负，则该点位于与法线相反的半空间中; 如果为零，点在面上\r\n     * @param planePoint1\r\n     * @param planePoint2\r\n     * @param point\r\n     * @return {*}\r\n     */\r\n    static pointPlaneInstance(planePoint1,planePoint2,point){\r\n        let sub = Cesium.Cartesian3.subtract(planePoint2,planePoint1,new Cesium.Cartesian3(0,0,0))\r\n        let normal = Cesium.Cartesian3.normalize(sub,new Cesium.Cartesian3(0,0,0))\r\n        let plane = Cesium.Plane.fromPointNormal(planePoint1,normal)\r\n        return Cesium.Plane.getPointDistance(plane,point)\r\n    }\r\n}\r\n\r\n/**\r\n * 实体工具\r\n * @author flake\r\n */\r\nclass EntityTool {\r\n    constructor(Cesium, viewer) {\r\n        this.Cesium = Cesium\r\n        this.viewer = viewer //对应Cesium框架内的Viewer类实例 ，类型为Viewer\r\n\r\n        this._default = {\r\n            lineWidth: 15,\r\n            lineColor: this.Cesium.Color.CORAL,\r\n            pointSize: 10,\r\n            pointColor: this.Cesium.Color.DEEPSKYBLUE,\r\n            textColor: this.Cesium.Color.DEEPSKYBLUE\r\n        }\r\n    }\r\n    set defaultOpt(opt){\r\n        this._default = Object.assign(this._default,opt)\r\n    }\r\n    get defaultOpt(){\r\n        return this._default\r\n    }\r\n    /**\r\n     * 添加折线\r\n     * @param pos Array.[Cartesian3]\r\n     * @return Entity\r\n     */\r\n    addPloyline(pos,option) {\r\n        let opt = Object.assign(this.getDefault(),option)\r\n        return this.viewer.entities.add({\r\n            polyline: {\r\n                positions: pos,\r\n                material: new this.Cesium.PolylineGlowMaterialProperty({\r\n                    glowPower: 0.2,\r\n                    taperPower: 0.5,\r\n                    color: opt.lineColor\r\n                }),\r\n                //material: new Cesium.PolylineArrowMaterialProperty(this.Cesium.Color.CORNFLOWERBLUE),\r\n                \"width\": opt.lineWidth,\r\n                \"clampToGround\": false\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 获取默认配置\r\n     * @return {{lineWidth: number, lineColor: Color}}\r\n     */\r\n    getDefault(){\r\n        return this._default\r\n    }\r\n    /**\r\n     * 添加点\r\n     * @param pos Array.[Cartesian3]\r\n     * @return Array.[Entity]\r\n     */\r\n    addPoint(pos, labelGraphics,option) {\r\n        let opt = Object.assign(this.getDefault(),option)\r\n        return pos.map(point => {\r\n            return this.viewer.entities.add({\r\n                position: point,\r\n                point: {\r\n                    pixelSize: opt.pointSize,\r\n                    color:opt.pointColor\r\n                },\r\n                label: labelGraphics\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 添加点附加经度文字\r\n     * @param pos Array.[Cartesian3]\r\n     */\r\n    addPointWithLongitude(pos,option) {\r\n        let opt = Object.assign(this.getDefault(),option)\r\n        return pos.map(point => {\r\n            return this.viewer.entities.add({\r\n                position: point,\r\n                point: {\r\n                    pixelSize: opt.pointSize,\r\n                    color:opt.pointColor\r\n                },\r\n                label: {\r\n                    text: '\\n\\n\\n\\n' + ((this.Cesium.Cartographic.fromCartesian(point).longitude) / Math.PI * 180).toFixed(1),\r\n                    font: '16px sans-serif',\r\n                    fillColor:opt.textColor\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 添加点附加纬度文字\r\n     * @param pos Array.[Cartesian3]\r\n     */\r\n    addPointWithLatitude(pos,option) {\r\n        let opt = Object.assign(this.getDefault(),option)\r\n        return pos.map(point => {\r\n            return this.viewer.entities.add({\r\n                position: point,\r\n                point: {\r\n                    pixelSize: opt.pointSize,\r\n                    color:opt.pointColor\r\n                },\r\n                label: {\r\n                    text: '\\n\\n' + ((this.Cesium.Cartographic.fromCartesian(point).latitude) / Math.PI * 180).toFixed(1),\r\n                    font: '16px sans-serif',\r\n                    fillColor:opt.textColor\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 添加单点和文字\r\n     * @param pos Cartesian3\r\n     * @param text 文本信息\r\n     * @return Entity\r\n     */\r\n    addSinglePointWithText(pos, text,option) {\r\n        let opt = Object.assign(this.getDefault(),option)\r\n        return this.viewer.entities.add({\r\n            position: pos,\r\n            point: {\r\n                pixelSize: opt.pointSize,\r\n                color:opt.pointColor\r\n            },\r\n            label: {\r\n                text: text,\r\n                font: '16px sans-serif',\r\n                fillColor:opt.textColor\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * 页面的切片工具对应的控制工具\r\n */\r\nclass SliceControl {\r\n    /**\r\n     * 构造函数\r\n     * @param slice {SliceTool} SliceTool实例\r\n     * @param el {String | HTMLElement | null} 元素，为null时会默认创建一个元素\r\n     * @param opt {\r\n     *     buttonClick(event,planeType,show)：xyz按钮的点击事件的回调,event：元素事件对象；planeType：轴对应的面；show：['show','hide']\r\n     *     move(call,ele,type) xyz轴移动的回调,call移动的实时信息；ele:['X','Y','Z'];type:['move','end']\r\n     * }\r\n     */\r\n    constructor(slice, el, opt) {\r\n        this.slice = slice\r\n        this.opt = opt || {}\r\n        if (typeof el === 'string') {\r\n            this.root = document.querySelector(el)\r\n        } else if (typeof el === 'object' && el instanceof HTMLElement) {\r\n            this.root = el\r\n        } else {\r\n            this.root = this._createRoot()\r\n        }\r\n        this._createChild()\r\n        this.init()\r\n        this.bindingEvent()\r\n\r\n        //储存当前的位置\r\n        this._x = 0.5\r\n        this._y = 0.5\r\n        this._z = 0.5\r\n    }\r\n\r\n    init() {\r\n        if(this.inited) return\r\n        //添加默认的class和属性，请使用slice.control.css来控制样式\r\n        this.root.classList.add(\"scroll-control\")\r\n        this.root.setAttribute(\"data-allow\", \"volume\")\r\n        //xyz 显示隐藏控制\r\n        this.root.addEventListener(\"click\", e => {\r\n            if (e.target.tagName.toLowerCase() === 'span') {\r\n                let map = {X: 'yoz', Y: 'xoz', Z: 'xoy'}\r\n                let type = map[e.target.innerHTML]\r\n\r\n                if (e.target.className === 'active') {\r\n                    e.target.className = ''\r\n                    this.slice.showPlane(type, true)\r\n                } else {\r\n                    e.target.className = 'active'\r\n                    this.slice.showPlane(type, false)\r\n                }\r\n                if (typeof this.opt.buttonClick === 'function') {\r\n                    this.opt.buttonClick(e, type, e.target.className === 'active' ? 'show' : 'hide')\r\n                }\r\n            }\r\n            e.stopPropagation()\r\n        })\r\n        this.inited = true\r\n    }\r\n\r\n    _createRoot() {\r\n        let root = document.createElement(\"div\")\r\n        document.body.appendChild(root)\r\n        return root\r\n    }\r\n\r\n    _createChild() {\r\n        this.root.innerHTML = this._createChildEle('X')\r\n            + this._createChildEle('Y')\r\n            + this._createChildEle('Z')\r\n\r\n    }\r\n\r\n    _createChildEle(type) {\r\n        return `\r\n            <div class=\"control\">\r\n                <span>${type}</span>\r\n                <div class=\"scroll\" id=\"scrollBar${type}\">\r\n                    <div class=\"bar\"></div>\r\n                    <div class=\"mask\"></div>\r\n                </div>\r\n            </div>\r\n`\r\n    }\r\n\r\n    bindingEvent() {\r\n        if (typeof this.opt.move !== 'function') {\r\n            this.opt.move = function () {\r\n\r\n            }\r\n        }\r\n        this._createBar({\r\n            el: \"#scrollBarX\",\r\n            move: call => {\r\n                this._sliceOffset('_x',call)\r\n                this.opt.move(call, 'X', 'move')\r\n            },\r\n            end: call => {\r\n                this._sliceOffset('_x',call)\r\n                this.opt.move(call, 'X', 'end')\r\n            }\r\n        })\r\n        this._createBar({\r\n            el: \"#scrollBarY\",\r\n            move: call => {\r\n                this._sliceOffset('_y',call)\r\n                this.opt.move(call, 'Y', 'move')\r\n            },\r\n            end: call => {\r\n                this._sliceOffset('_y',call)\r\n                this.opt.move(call, 'Y', 'end')\r\n            }\r\n        })\r\n        this._createBar({\r\n            el: \"#scrollBarZ\",\r\n            move: call => {\r\n                this._sliceOffset('_z',call)\r\n                this.opt.move(call, 'Z', 'move')\r\n            },\r\n            end: call => {\r\n                this._sliceOffset('_z',call)\r\n                this.opt.move(call, 'Z', 'end')\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 设置体数据切片的位置\r\n     * @param key 轴对应的变量\r\n     * @param call 轴移动的回调参数\r\n     * @private\r\n     */\r\n    _sliceOffset(key,call){\r\n        this[key] = call.scale\r\n        this.slice.offset = {\r\n            yoz_offset: this._x,\r\n            xoz_offset: this._y,\r\n            xoy_offset: this._z,\r\n        }\r\n    }\r\n    _createBar(obj) {\r\n        // 获取元素\r\n        let scrollBar = this.root.querySelector(obj.el);\r\n        let bar = scrollBar.children[0];\r\n        let mask = scrollBar.children[1];\r\n        let timer = new Date().getTime()\r\n        // 拖动\r\n        bar.onmousedown = function (event) {\r\n            let leftVal = event.clientX - this.offsetLeft;\r\n            // 拖动放到down的里面\r\n            let that = this;\r\n            document.onmousemove = function (event) {\r\n                let new_time = new Date().getTime()\r\n                if (new_time - timer < 17) {\r\n                    return\r\n                }\r\n                timer = new_time\r\n                that.style.left = event.clientX - leftVal + \"px\";\r\n                // 限制条件\r\n                let val = parseInt(that.style.left);\r\n                if (val < 0) {\r\n                    that.style.left = 0;\r\n                } else if (val > 382) {\r\n                    that.style.left = \"382px\";\r\n                }\r\n                // 移动的距离为遮罩的宽度\r\n                mask.style.width = that.style.left;\r\n                // 回调\r\n                if (typeof obj.move === 'function') obj.move({\r\n                    type: 'move',\r\n                    scrollBar: scrollBar,\r\n                    elText: obj.el,\r\n                    scale: (parseInt(that.style.left) / 382)\r\n                })\r\n                // 清除拖动 --- 防止鼠标已经弹起时还在拖动\r\n                window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();\r\n            }\r\n            // 鼠标抬起停止拖动\r\n            document.onmouseup = function () {\r\n                if (typeof obj.end === 'function') obj.end({\r\n                    type: 'end',\r\n                    scrollBar: scrollBar,\r\n                    elText: obj.el,\r\n                    scale: (parseInt(that.style.left) / 382)\r\n                })\r\n                document.onmousemove = null;\r\n                document.onmouseup = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.root.parentNode.removeChild(this.root)\r\n        this.slice = null\r\n        this.opt = null\r\n    }\r\n}\r\n\r\nclass MapVolume extends _Common{\r\n    constructor(map3dView,from,to, options) {\r\n        super()\r\n        this._map = map3dView;\r\n        this._box = {\r\n            \"xmax\":to.longitude,\"xmin\":from.longitude,\r\n            \"ymax\":to.latitude,\"ymin\":from.latitude,\r\n            \"zmax\":to.height,\"zmin\":from.height,\r\n            \"avalibleflag\":true\r\n        };\r\n        this._scale = options.scale ? options.scale : [1, 1, 1];\r\n        this._offset = options.offset ? options.offset : [0, 0, 0];\r\n        this._line   = [0.0, 0.0, 0.2, 0.8, 1.0, 1.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0];\r\n        //订阅者\r\n        this.bindingCollection = []\r\n        //观察者\r\n        this.handlers = {}\r\n        //存储各自变量\r\n        this._vol = {\r\n            pri: null,\r\n            apprance: null,\r\n            mat: null\r\n        };\r\n        this._sect = {\r\n            pri: [],\r\n            apprance: null,\r\n            mat: null\r\n        };\r\n        this._filter = {\r\n            pri: null,\r\n            apprance: null,\r\n            mat: null\r\n        };\r\n\r\n        if(options){\r\n            this.filterParam =  options.filterParam || {}\r\n        }\r\n\r\n        this._url = options.url ? options.url : \"BaseWhite\";\r\n\r\n        this._loadImage(this._url)\r\n        this._color = options.colorMap\r\n        let stamp = Date.parse(new Date());\r\n        this._name = options.name ? options.name : (\"Volume_TimeStap_\" + stamp);\r\n\r\n        this._sectpri = [];\r\n        this.__sectpri = {};\r\n\r\n        this._sectgeo = [];\r\n\r\n        this.SURFACE = 1        //曲面模式标志位\r\n\r\n        // 体数据渲染的模式，1表示采用曲面代理几何渲染,0表示正立方体渲染\r\n        if(options && options.mode === 1){\r\n            this.mode = 1\r\n        }else{\r\n            this.mode = 0\r\n        }\r\n        let _this = this\r\n        ///过滤分析\r\n        if (FilterEdit && !this._filterControl) {\r\n            let param=Object.assign({\r\n                split_X:4,\r\n                split_Y:2,\r\n                tolerance:3,\r\n                min_X: 0,\r\n                max_X: 1000,\r\n                max_Y: 1000,\r\n                min_Y: 0,\r\n            },this.filterParam || {});\r\n\r\n            let div = document.createElement(\"div\")\r\n            div.className = \"analysis\"\r\n            div.setAttribute(\"data-allow\",\"volume\");\r\n            document.body.appendChild(div)\r\n            this._filterControl = new FilterEdit(div,param)\r\n\r\n            //拖动事件:line为当前折线,position为控制点的位置\r\n            this._filterControl.onchangestatus = function (position, line) {\r\n\r\n            }\r\n            //拖动结束事件:line为当前折线,position为控制点的位置\r\n            this._filterControl.onchangestatus_over = function (position, line) {\r\n\r\n                // 最多接收16个值\r\n                _this.filterLine = line.flat().slice(0,16).map((num,index)=> index%2 === 0 ? num/param.max_X : num/param.max_Y)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * get/set 过滤分析的控制元素对象\r\n     * @param filterControl\r\n     * @see FilterEdit\r\n     */\r\n    set filterControl(filterControl){\r\n        this._filterControl = filterControl\r\n    }\r\n    get filterControl(){\r\n        return this._filterControl\r\n    }\r\n    // get/set 可见性\r\n    set visible(visible) {\r\n        this._visible = visible\r\n        this._vol.pri && (this._vol.pri.show = visible)\r\n    }\r\n\r\n    get visible() {\r\n        return this._visible\r\n    }\r\n\r\n    // get/set 盒子属性\r\n    set box(box) {\r\n        this._box = box;\r\n    }\r\n\r\n    get box() {\r\n        return this._box;\r\n    }\r\n\r\n    /**\r\n     * get/set 缩放比例\r\n     * @param scale [xScale,yScale,zScale]\r\n     * @example vol.scale = [1,1,2] z轴扩展两倍\r\n     */\r\n    set scale(scale) {\r\n        this._scale = scale;\r\n        let calc = this._calcParam()\r\n        this.update(calc.from,calc.to)\r\n        this.refresh();\r\n    }\r\n\r\n    get scale() {\r\n        return this._scale;\r\n    }\r\n    // get/set 清晰度\r\n    set sharpness(sharpness){\r\n        this._sharpness = sharpness\r\n    }\r\n    get sharpness(){\r\n        return this._sharpness\r\n    }\r\n    /**\r\n     * get/set 偏移量\r\n     * @param offset [x,y,z]\r\n     * @example vol.offset = [0,0,100] 模型抬起100米\r\n     */\r\n    set offset(offset){\r\n        this._offset = offset\r\n        let calc = this._calcParam()\r\n        this.update(calc.from,calc.to)\r\n        this.refresh();\r\n    }\r\n\r\n    get offset(){\r\n        return this._offset\r\n    }\r\n\r\n    set filterLine(line){\r\n        this._line = line\r\n        this._setFilter()\r\n        //过滤\r\n        if (Array.isArray(line)) {\r\n\r\n            if(this._vol.pri){\r\n                let pri = this._vol.pri;\r\n                pri.appearance.material.uniforms.line = line;\r\n\r\n            }\r\n            if(this._filter.pri){\r\n                let pri = this._filter.pri;\r\n                pri.appearance.material.uniforms.line = line;\r\n\r\n            }\r\n            if(this.slice_material){\r\n                this._sectpri.forEach(pri => {\r\n                    pri.appearance.material.uniforms.line = line;\r\n                })\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    get filterLine(){\r\n        return this._line\r\n    }\r\n\r\n    /**\r\n     * 切片体的显示和隐藏\r\n     * @param val\r\n     */\r\n    set sliceVisble(val){\r\n        this._sectpri.forEach(pri => {\r\n            pri.show = !!val\r\n        })\r\n    }\r\n    set sliceXVisble(val){\r\n        this._sectpri[0].show = !!val\r\n    }\r\n    set sliceYVisble(val){\r\n        this._sectpri[1].show = !!val\r\n    }\r\n    set sliceZVisble(val){\r\n        this._sectpri[2].show = !!val\r\n    }\r\n\r\n    initShader() {\r\n        this.shader = this.SURFACE === this.mode ? GLSL_VOLUME_SURFACE : GLSL_VOLUME\r\n    }\r\n    update(from,to){\r\n\r\n        //TODO 实现体数据的更新\r\n        let calc = this._calcParam()\r\n        if(!from){\r\n            from = calc.from\r\n        }\r\n        if(!to){\r\n            to = calc.to\r\n        }\r\n\r\n        this.bindingCollection.forEach(tool => {\r\n            tool.update(from,to,this.scale)\r\n        })\r\n    }\r\n    clean(){\r\n\r\n    }\r\n\r\n    /**\r\n     * 加载体数据图片\r\n     * @param url\r\n     * @private\r\n     */\r\n    _loadImage(url){\r\n        let _this = this\r\n\r\n        /**\r\n         * 标志位 表示图片的加载状态\r\n         * @type {number} {0:未完成,1:已完成,-1:已失败}\r\n         */\r\n        this.imageLoaded = 0;\r\n        this.image = this.image || new Image()\r\n        this.image.src = url\r\n        this.image.crossOrigin = \"anonymous\"    //允许跨域\r\n        this.image.onload = function () {\r\n            _this.imageLoaded = 1\r\n        }\r\n        this.image.onerror = function () {\r\n            _this.imageLoaded = -1\r\n            throw new Error(\"体数据模型地址无效\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 将交互工具和体数据工具互相绑定<br>\r\n     * 基于简单的发布/订阅模式，体数据范围更新的时候，会通知订阅者更新数据<br>\r\n     * 使用此方法，不用关心手动去更新交互工具\r\n     * @see this.update()\r\n     * @param tool{Array.[_Common] | _Common} 实现了_Common的实例 或者实例数组\r\n     */\r\n    binding(tool){\r\n        if(Array.isArray(tool)){\r\n            this._binding(tool)\r\n        }else{\r\n            this._binding([tool])\r\n        }\r\n    }\r\n\r\n    _binding(tools){\r\n        for(let i=0;i<tools.length;i++){\r\n            let tool = tools[i]\r\n            if(tool instanceof _Common){\r\n                this.bindingCollection.push(tool)\r\n                tool.binding(this)\r\n            }else{\r\n                throw Error(\"请传入实现_Comon接口的实例\")\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 绑定事件\r\n     * @param type 类型\r\n     * @param handler 回调\r\n     * @return {Number} 当前毫秒数，作为事件id ，移除事件的时候能用到\r\n     * @example this.on(\"update\",function(type,obj){})\r\n     */\r\n    on(type,handler){\r\n        if(!type in this.handlers){\r\n            this.handlers[type] = []\r\n        }\r\n        let id = Date().now()\r\n        this.handlers[type].push({\r\n            handler:handler,\r\n            id:id\r\n        })\r\n        return id\r\n    }\r\n\r\n    /**\r\n     * 移除事件\r\n     * @param type 类型\r\n     * @param id 事件id\r\n     * @example this.off() 移除绑定在此对象上面的所有事件\r\n     * @example this.off(\"update\") 移除绑定在此对象上面的所有update事件\r\n     * @example this.off(\"update\",1123231231) 移除绑定在此对象上面的id为1123231231的update事件\r\n     */\r\n    off(type,id){\r\n        if(!type){  //清除所有观察者\r\n            this.handlers = {}\r\n        }else if(!id){  //清除某一个类型的观察者\r\n            this.handlers[type] = []\r\n        }else if(this.handlers[type]){\r\n            let events = this.handlers[type]\r\n            for(let i = 0 ;i<events.length; i++){\r\n                if(events[i].id === id){    //移除单个事件\r\n                    events.splice(i,1)\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 触发事件\r\n     * @param type 类型\r\n     * @param obj 传递过去的参数\r\n     * @example this.emit(\"update\",{})\r\n     */\r\n    emit(type,obj){\r\n        let events = this.handlers[type]\r\n        for(let i = 0 ;i<events.length; i++){\r\n            if(typeof events[i].handler === 'function'){\r\n                events[i].handler(type,obj)\r\n            }\r\n        }\r\n    }\r\n    setVolume(){\r\n        if(this.imageLoaded === 1){\r\n            return this.mode === this.SURFACE ? this.setVolume_2() : this.setVolume_1()\r\n        }else if(this.imageLoaded === 0){\r\n            let arg = arguments\r\n            setTimeout( ()=> {\r\n                this.setVolume.apply(this,arg)\r\n            },50)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 普通模型的渲染方式\r\n     */\r\n    setVolume_1() {\r\n        let viewer = this._map.GetView();\r\n\r\n        //计算参数\r\n        let param = this._calcParam();\r\n        let {deltaMaxH,deltaX,deltaY,deltaMinH} = param\r\n        let matrix = param.cenMatrix;\r\n        let invMatrixs = param.invCenMatrix;\r\n        // 向shader传参\r\n        let material = null;\r\n        if (!this._vol.mat) {\r\n            material = this._vol.mat = new Cesium.Material({\r\n                fabric: {\r\n                    type: 'PramLQ',\r\n                    uniforms: {\r\n                        //              cubeTex : './radar.png',\r\n                        cubeTex: this.image,\r\n                        transferTex: this._color,\r\n                        invMat: Cesium.Matrix4.toArray(invMatrixs),\r\n                        boxLon: deltaX,\r\n                        boxLat: deltaY,\r\n                        boxHeight: deltaMaxH,\r\n                        minHeight: 0,\r\n                        minLongitude: 0,\r\n                        minLatitude: 0,\r\n                        maxHeight: deltaMaxH,\r\n                        maxLongitude: deltaX,\r\n                        maxLatitude: deltaY,\r\n                        line: this._line,\r\n                        normall: new Cesium.Cartesian3(0, 0, 1)\r\n                    },\r\n                }\r\n            });\r\n        } else {\r\n            material = this._vol.mat;\r\n            material.uniforms.invMat = Cesium.Matrix4.toArray(invMatrixs),\r\n            material.uniforms.boxLon = deltaX,\r\n            material.uniforms.boxLat = deltaY,\r\n            material.uniforms.boxHeight = deltaMaxH,\r\n            material.uniforms.minHeight = 0,\r\n            material.uniforms.minLongitude = 0,\r\n            material.uniforms.minLatitude = 0,\r\n            material.uniforms.maxHeight = deltaMaxH,\r\n            material.uniforms.maxLongitude = deltaX,\r\n            material.uniforms.maxLatitude = deltaY\r\n        }\r\n\r\n        // 代理几何体添加到指定经纬度场景\r\n        let box = new Cesium.BoxGeometry({\r\n            maximum: new Cesium.Cartesian3(deltaX, deltaY, deltaMaxH),\r\n            minimum: new Cesium.Cartesian3(0.0, 0.0, deltaMinH)\r\n        });\r\n\r\n        let boxGeometry = this._vol.geom = Cesium.BoxGeometry.createGeometry(box);\r\n\r\n        let appearance = this._vol.apperance = new Cesium.MaterialAppearance({\r\n            material: material,\r\n            vertexShaderSource: this.shader.vertexShaderPass,\r\n            fragmentShaderSource: this.shader.fragmentShaderPass,\r\n\r\n            faceForward: true,\r\n            closed: true\r\n        });\r\n        this._vol.pri && viewer.scene.primitives.remove(this._vol.pri)\r\n        let pri = this._vol.pri = new Cesium.Primitive({\r\n            geometryInstances: new Cesium.GeometryInstance({\r\n                geometry: boxGeometry,\r\n                debugShowBoundingVolume: true,\r\n                modelMatrix: matrix,\r\n                id: this._name\r\n            }),\r\n            asynchronous: false,\r\n            appearance: appearance\r\n        });\r\n        viewer.scene.primitives.add(pri);\r\n    }\r\n    /**\r\n     * 曲面模型的渲染方式\r\n     */\r\n    setVolume_2() {\r\n        let viewer = this._map.GetView();\r\n\r\n        //计算参数\r\n        let param = this._calcParam();\r\n        let {deltaMaxH,deltaX,deltaY,deltaMinH,deltalon,deltalat,deltaH,\r\n            xmin,xmax,ymin,ymax,zmin,zmax,recDiagonal} = param\r\n        let matrix = param.cenMatrix;\r\n        let invMatrixs = param.invCenMatrix;\r\n\r\n\r\n        let rectangle;\r\n        // 代理几何体添加到指定经纬度场景\r\n        var boxGeometry = null;\r\n\r\n        rectangle = new Cesium.RectangleGeometry({\r\n            rectangle : Cesium.Rectangle.fromDegrees(xmin, ymin, xmax, ymax),\r\n            height: deltaMinH,\r\n            extrudedHeight: deltaMaxH\r\n        });\r\n        boxGeometry = this._vol.geom = Cesium.RectangleGeometry.createGeometry(rectangle);\r\n\r\n        // 向shader传参\r\n        let material = null;\r\n        if (!this._vol.mat) {\r\n            material = this._vol.mat = new Cesium.Material({\r\n\r\n                // translucent:false,\r\n                fabric: {\r\n                    type: 'PramLQ',\r\n                    uniforms: {\r\n                        //              cubeTex : './radar.png',\r\n                        cubeTex: this.image,\r\n                        transferTex: this._color,\r\n                        invMat: Cesium.Matrix4.toArray(invMatrixs),\r\n                        //采用new Cesium.Cartesian3方法的意义仅仅在于通过矢量形式传递参数至着色器中，不具有其他意义\r\n                        box: new Cesium.Cartesian3(deltalon, deltalat,deltaH), //boxLon : deltalon,//boxLat : deltalat,//boxHeight : deltaH,\r\n                        boxmin: new Cesium.Cartesian3(xmin, ymin,zmin), // minHeight :  zmin,// minLongitude : xmin,// minLatitude  : ymin,\r\n                        boxmax:  new Cesium.Cartesian3(xmax, ymax,zmax), //maxHeight : zmax,//maxLongitude : xmax,//maxLatitude :  ymax,\r\n                        texmin: new Cesium.Cartesian3(0.0,0.0,0.0),\r\n                        texmax : new Cesium.Cartesian3(1.0, 1.0,1.0),\r\n                        recDiagonal: boxGeometry.boundingSphere.radius,\r\n                        line: this._line,\r\n                    },\r\n                }\r\n            });\r\n        } else {\r\n            material = this._vol.mat;\r\n            material.uniforms = Object.assign(material.uniforms,{\r\n                //              cubeTex : './radar.png',\r\n                cubeTex: this.image,\r\n                transferTex: this._color,\r\n                invMat: Cesium.Matrix4.toArray(invMatrixs),\r\n                //采用new Cesium.Cartesian3方法的意义仅仅在于通过矢量形式传递参数至着色器中，不具有其他意义\r\n                box: new Cesium.Cartesian3(deltalon, deltalat,deltaH), //boxLon : deltalon,//boxLat : deltalat,//boxHeight : deltaH,\r\n                boxmin: new Cesium.Cartesian3(xmin, ymin,zmin), // minHeight :  zmin,// minLongitude : xmin,// minLatitude  : ymin,\r\n                boxmax:  new Cesium.Cartesian3(xmax, ymax,zmax), //maxHeight : zmax,//maxLongitude : xmax,//maxLatitude :  ymax,\r\n                texmin: new Cesium.Cartesian3(0.0,0.0,0.0),\r\n                texmax : new Cesium.Cartesian3(1.0, 1.0,1.0),\r\n                recDiagonal: boxGeometry.boundingSphere.radius,\r\n                line: this._line,\r\n            })\r\n                // material.uniforms.box = new Cesium.Cartesian3(deltalon, deltalat,deltaH),\r\n                // material.uniforms.boxmin = new Cesium.Cartesian3(xmin, ymin,zmin),\r\n                // material.uniforms.boxmax = new Cesium.Cartesian3(xmax, ymax,zmax)\r\n        }\r\n\r\n        let appearance = this._vol.apperance = new Cesium.MaterialAppearance({\r\n            material: material,\r\n            vertexShaderSource: this.shader.vertexShaderPass,\r\n            fragmentShaderSource: this.shader.filterFragmentShaderPass,\r\n            translucent : false,\r\n            faceForward: true,\r\n            closed: true\r\n        });\r\n        this._vol.pri && viewer.scene.primitives.remove(this._vol.pri)\r\n        let pri = this._vol.pri = new Cesium.Primitive({\r\n            geometryInstances: new Cesium.GeometryInstance({\r\n                geometry: boxGeometry,\r\n                debugShowBoundingVolume: true,\r\n                // modelMatrix: matrix,\r\n                id: this._name\r\n            }),\r\n            asynchronous: false,\r\n            appearance: appearance\r\n        });\r\n        viewer.scene.primitives.add(pri);\r\n    }\r\n\r\n    _setFilter() {\r\n        let viewer = this._map.GetView();\r\n\r\n        //计算参数\r\n        let param = this._calcParam();\r\n        let matrix = param.cenMatrix;\r\n\r\n        if (this._vol.pri) this._vol.pri.show = false;\r\n\r\n        let appearance;\r\n        let material = this._vol.mat;\r\n        let boxGeometry = this._vol.geom;\r\n        if (this._filter.apperance) {\r\n            appearance = this._filter.apperance;\r\n        }\r\n        else {\r\n            appearance = this._filter.apperance = new Cesium.MaterialAppearance({\r\n                material: material,\r\n                vertexShaderSource: this.shader.filterVertexShaderPass,\r\n                fragmentShaderSource: this.shader.filterFragmentShaderPass,\r\n                faceForward: true,\r\n                closed: true\r\n            });\r\n        }\r\n\r\n        if (!this._filter.pri) {\r\n            let pri = this._filter.pri = new Cesium.Primitive({\r\n                geometryInstances: new Cesium.GeometryInstance({\r\n                    geometry: boxGeometry,\r\n                    debugShowBoundingVolume: true,\r\n                    modelMatrix:  this.mode === this.SURFACE ? null : matrix,   //非曲面不需要模型变换\r\n                    id: this._name\r\n                }),\r\n                asynchronous: false,\r\n                appearance: appearance\r\n            });\r\n            viewer.scene.primitives.add(pri);\r\n        }else{\r\n            this._filter.pri.show = true\r\n        }\r\n\r\n    }\r\n\r\n    setSlice(slice){\r\n        if(this.imageLoaded === 1){\r\n            return this.mode === this.SURFACE ? this.setSlice_2(slice) : this.setSlice_1(slice);\r\n        }else if(this.imageLoaded === 0){\r\n            let arg = arguments\r\n            setTimeout( ()=> {\r\n                this.setSlice.apply(this,arg)\r\n            },50)\r\n        }\r\n    }\r\n    setSlice_1(slice) {\r\n        if(!this.sliceInited){\r\n            this.initSlice({x:0.5,y:0.5,z:0.5})\r\n        }\r\n        let viewer = this._map.GetView();\r\n\r\n        //计算参数\r\n        let param = this._calcParam();\r\n        let {xcen,ycen,zcen,deltaMaxH,deltaX,deltaY,deltaH} = param\r\n\r\n        let matrix = param.cenMatrix;\r\n        let invMatrixs = param.invCenMatrix;\r\n\r\n\r\n        if (this._vol.pri) this._vol.pri.show = false;\r\n        if (this._filter.pri) this._filter.pri.show = false;\r\n\r\n        let xstart = parseInt(this._box.xmin);\r\n        let ystart = parseInt(this._box.ymin);\r\n        let zstart = this._box.zmin;\r\n        // 向shader传参\r\n        this.slice_material = this.slice_material || new Cesium.Material({\r\n            fabric: {\r\n                type: 'PramLQ',\r\n                uniforms: {\r\n                    //cubeTex : './radar.png',\r\n                    cubeTex: this.image,\r\n                    transferTex: this._color,\r\n                    invMat: Cesium.Matrix4.toArray(invMatrixs),\r\n                    boxLong: deltaX,\r\n                    boxWidth: deltaY,\r\n                    boxHeight: deltaMaxH,\r\n                    line: this._line\r\n                }\r\n            }\r\n        });\r\n        let material = this.slice_material\r\n\r\n        //create buffer\r\n        // let nameArray = [\"lonSection\", \"latSection\", \"heiSection\"];\r\n        let nameArray = [];\r\n        let sliceArray = [], normalsArray = [], texCoorsArray = [], indexsArray = [], modelMatrixArray = [];\r\n\r\n        if(slice.x !== undefined){  //为0的时候会报错，下同\r\n            let _xSlice = Math.max(slice.x,0.003) * deltaX\r\n            //xslice\r\n            let xSlice = new Float64Array([\r\n                _xSlice, 0.0, 0.0,\r\n                _xSlice, deltaY, 0.0,\r\n                _xSlice, 0.0, deltaMaxH,\r\n                _xSlice, deltaY, deltaMaxH\r\n            ]);\r\n            let xNormals = new Float32Array([\r\n                0.0, 0.0, 1.0,\r\n                0.0, 0.0, 1.0,\r\n                0.0, 0.0, 1.0,\r\n                0.0, 0.0, 1.0,\r\n            ]);\r\n            let xTexCoords = new Float32Array([\r\n                0.0, 1.0,\r\n                0.0, 0.5,\r\n                0.5, 0.0,\r\n                1.0, 1.0\r\n            ]);\r\n\r\n            let modelMatrix = Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\r\n                Cesium.Cartesian3.fromDegrees(xcen, ystart, zstart)),\r\n                new Cesium.Cartesian3(0.0, 0.0, 0.0), new Cesium.Matrix4());\r\n\r\n            let xIndexs = new Uint32Array([0, 1, 3, 3, 2, 0]);\r\n            sliceArray.push(xSlice);\r\n            normalsArray.push(xNormals);\r\n            texCoorsArray.push(xTexCoords);\r\n            indexsArray.push(xIndexs);\r\n            modelMatrixArray.push(modelMatrix);\r\n\r\n            nameArray.push(\"lonSection\")\r\n        }\r\n        if(slice.y !== undefined){\r\n            let _ySlice = Math.max(slice.y,0.003) * deltaY\r\n            //yIndex\r\n            let ySlice = new Float64Array([\r\n                0.0, _ySlice, 0.0,\r\n                deltaX, _ySlice, 0.0,\r\n                0.0, _ySlice, deltaMaxH,\r\n                deltaX, _ySlice, deltaMaxH\r\n            ]);\r\n            let yNormals = new Float32Array([\r\n                0.0, 0.0, 1.0,\r\n                0.0, 0.0, 1.0,\r\n                0.0, 0.0, 1.0,\r\n                0.0, 0.0, 1.0,\r\n            ]);\r\n            let yTexCoords = new Float32Array([\r\n                0.0, 1.0,\r\n                0.0, 0.5,\r\n                0.5, 0.0,\r\n                1.0, 1.0\r\n            ]);\r\n\r\n            let modelMatrix = Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\r\n                Cesium.Cartesian3.fromDegrees(xstart, ycen, zstart)),\r\n                new Cesium.Cartesian3(0.0, 0.0, 0.0), new Cesium.Matrix4());\r\n\r\n\r\n            let yIndexs = new Uint32Array([0, 1, 3, 3, 2, 0]);\r\n            sliceArray.push(ySlice);\r\n            normalsArray.push(yNormals);\r\n            texCoorsArray.push(yTexCoords);\r\n            indexsArray.push(yIndexs);\r\n            modelMatrixArray.push(modelMatrix);\r\n\r\n            nameArray.push(\"latSection\")\r\n        }\r\n        if(slice.z !== undefined){\r\n            let _zSlice = Math.max(slice.z,0.003) * deltaH\r\n            //\r\n\r\n            let zSlice = new Float64Array([\r\n                0.0, 0.0, _zSlice,\r\n                deltaX, 0.0, _zSlice,\r\n                0.0, deltaY, _zSlice,\r\n                deltaX, deltaY, _zSlice\r\n            ]);\r\n            let zNormals = new Float32Array([\r\n                0.0, 0.0, 1.0,\r\n                0.0, 0.0, 1.0,\r\n                0.0, 0.0, 1.0,\r\n                0.0, 0.0, 1.0,\r\n            ]);\r\n            let zTexCoords = new Float32Array([\r\n                0.0, 1.0,\r\n                0.0, 0.5,\r\n                0.5, 0.0,\r\n                1.0, 1.0\r\n            ]);\r\n            let zIndexs = new Uint32Array([0, 1, 3, 3, 2, 0]);\r\n            let modelMatrix = Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\r\n                Cesium.Cartesian3.fromDegrees(xstart, ystart, zcen)),\r\n                new Cesium.Cartesian3(0.0, 0.0, 0.0), new Cesium.Matrix4());\r\n\r\n            sliceArray.push(zSlice);\r\n            normalsArray.push(zNormals);\r\n            texCoorsArray.push(zTexCoords);\r\n            indexsArray.push(zIndexs);\r\n            modelMatrixArray.push(modelMatrix);\r\n\r\n            nameArray.push(\"heiSection\") \r\n        }\r\n        let map = {\r\n            \"lonSection\":0, \"latSection\":1, \"heiSection\":2\r\n        }\r\n\r\n        let pri = this._sectpri[map[nameArray[0]]]\r\n\r\n        // viewer.scene.primitives.remove(pri)\r\n        this._sectpri.forEach(pri => {\r\n            viewer.scene.primitives.remove(pri)\r\n        })\r\n        this._sectpri = []\r\n        nameArray.forEach((key)=> {\r\n            viewer.scene.primitives.remove(this.__sectpri[key])\r\n        })\r\n\r\n        //create Geometry\r\n        for (let i = 0; i < nameArray.length; i++) {\r\n            let attributes = new Cesium.GeometryAttributes();\r\n            attributes.position = new Cesium.GeometryAttribute({\r\n                componentDatatype: Cesium.ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute: 3,\r\n                values: sliceArray[i]\r\n            });\r\n        \r\n            attributes.normal = new Cesium.GeometryAttribute({\r\n                componentDatatype: Cesium.ComponentDatatype.FLOAT,\r\n                componentsPerAttribute: 3,\r\n                values: normalsArray[i]\r\n            });\r\n        \r\n            attributes.st = new Cesium.GeometryAttribute({\r\n                componentDatatype: Cesium.ComponentDatatype.FLOAT,\r\n                componentsPerAttribute: 2,\r\n                values: texCoorsArray[i]\r\n            });\r\n        \r\n            let geo = new Cesium.Geometry({\r\n                attributes: attributes,\r\n                indices: indexsArray[i],\r\n                primitiveType: Cesium.PrimitiveType.TRIANGLES,\r\n                boundingSphere: Cesium.BoundingSphere.fromVertices(sliceArray[i]),\r\n            });\r\n            let pri = new Cesium.Primitive({\r\n                geometryInstances: new Cesium.GeometryInstance({\r\n                    geometry: geo,\r\n                    id: nameArray[i]\r\n                }),\r\n                //modelMatrix : modelMatrixArray[i],\r\n                modelMatrix: matrix,\r\n                asynchronous: false,\r\n                appearance: new Cesium.MaterialAppearance({\r\n                    material: material,\r\n                    vertexShaderSource: this.shader.sliceVertexShaderPass,\r\n                    fragmentShaderSource: this.shader.sliceFragmentShaderPass,\r\n                    faceForward: true\r\n                })\r\n            });\r\n            this.__sectpri[nameArray[i]] = pri;\r\n            viewer.scene.primitives.add(pri);\r\n        }\r\n\r\n    }\r\n    setSlice_2(slice) {\r\n        let {\r\n            xmin,\r\n            xmax,\r\n            ymin,\r\n            ymax,\r\n            zmin,\r\n            zmax\r\n        } = this._calcParam()\r\n        let diff_x = xmax-xmin,\r\n            diff_y = ymax-ymin,\r\n            diff_z = zmax-zmin,\r\n            target_x = xmin+slice.x*diff_x,\r\n            target_y = ymin+slice.y*diff_y,\r\n            target_z = zmin+slice.z*diff_z\r\n\r\n        let sliceP = [[target_x,ymin,diff_z,target_x,ymax,diff_z],[xmin,target_y,diff_z,xmax,target_y,diff_z],[xmin,ymin,xmax,ymax,target_z]]\r\n\r\n        this.initSlice(sliceP)\r\n    }\r\n    initSlice(slice){\r\n        if(this.imageLoaded === 1){\r\n            return this.mode === this.SURFACE ? this.initSlice_2(slice) : this.initSlice_1(slice);\r\n        }else if(this.imageLoaded === 0){\r\n            let arg = arguments\r\n            setTimeout( ()=> {\r\n                this.initSlice.apply(this,arg)\r\n            },50)\r\n        }\r\n    }\r\n    initSlice_1(slice){\r\n        let viewer = this._map.GetView();\r\n\r\n        //计算参数\r\n        let param = this._calcParam();\r\n        let {xcen,ycen,zcen,deltaMaxH,deltaX,deltaY,deltaH} = param\r\n\r\n        let matrix = param.cenMatrix;\r\n        let invMatrixs = param.invCenMatrix;\r\n\r\n\r\n        if (this._vol.pri) this._vol.pri.show = false;\r\n        if (this._filter.pri) this._filter.pri.show = false;\r\n\r\n        let xstart = parseInt(this._box.xmin);\r\n        let ystart = parseInt(this._box.ymin);\r\n        let zstart = this._box.zmin;\r\n\r\n        let xNormals,yNormals,zNormals,\r\n            xTexCoords,yTexCoords,zTexCoords,\r\n            xIndexs,yIndexs,zIndexs\r\n        xNormals = yNormals = zNormals = new Float32Array([\r\n            0.0, 0.0, 1.0,\r\n            0.0, 0.0, 1.0,\r\n            0.0, 0.0, 1.0,\r\n            0.0, 0.0, 1.0,\r\n        ]);\r\n        xTexCoords = yTexCoords = zTexCoords = new Float32Array([\r\n            0.0, 1.0,\r\n            0.0, 0.5,\r\n            0.5, 0.0,\r\n            1.0, 1.0\r\n        ]);\r\n        xIndexs = yIndexs = zIndexs = new Uint32Array([0, 1, 3, 3, 2, 0]);\r\n\r\n        // 向shader传参\r\n        this.slice_material = this.slice_material || new Cesium.Material({\r\n            fabric: {\r\n                type: 'PramLQ',\r\n                uniforms: {\r\n                    //cubeTex : './radar.png',\r\n                    cubeTex: this.image,\r\n                    transferTex: this._color,\r\n                    invMat: Cesium.Matrix4.toArray(invMatrixs),\r\n                    boxLong: deltaX,\r\n                    boxWidth: deltaY,\r\n                    boxHeight: deltaMaxH,\r\n                    line: this._line\r\n                }\r\n            }\r\n        });\r\n        let material = this.slice_material\r\n\r\n        //create buffer\r\n        // let nameArray = [\"lonSection\", \"latSection\", \"heiSection\"];\r\n        let nameArray = [];\r\n        let sliceArray = [], normalsArray = [], texCoorsArray = [], indexsArray = [], modelMatrixArray = [];\r\n\r\n        if(slice.x !== undefined){  //为0的时候会报错，下同\r\n            let _xSlice = Math.max(slice.x,0.003) * deltaX\r\n            //xslice\r\n            let xSlice = new Float64Array([\r\n                _xSlice, 0.0, 0.0,\r\n                _xSlice, deltaY, 0.0,\r\n                _xSlice, 0.0, deltaMaxH,\r\n                _xSlice, deltaY, deltaMaxH\r\n            ]);\r\n\r\n            let modelMatrix = Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\r\n                Cesium.Cartesian3.fromDegrees(xcen, ystart, zstart)),\r\n                new Cesium.Cartesian3(0.0, 0.0, 0.0), new Cesium.Matrix4());\r\n\r\n            sliceArray.push(xSlice);\r\n            normalsArray.push(xNormals);\r\n            texCoorsArray.push(xTexCoords);\r\n            indexsArray.push(xIndexs);\r\n            modelMatrixArray.push(modelMatrix);\r\n\r\n            nameArray.push(\"lonSection\")\r\n        }\r\n        if(slice.y !== undefined){\r\n            let _ySlice = Math.max(slice.y,0.003) * deltaY\r\n            //yIndex\r\n            let ySlice = new Float64Array([\r\n                0.0, _ySlice, 0.0,\r\n                deltaX, _ySlice, 0.0,\r\n                0.0, _ySlice, deltaMaxH,\r\n                deltaX, _ySlice, deltaMaxH\r\n            ]);\r\n\r\n            let modelMatrix = Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\r\n                Cesium.Cartesian3.fromDegrees(xstart, ycen, zstart)),\r\n                new Cesium.Cartesian3(0.0, 0.0, 0.0), new Cesium.Matrix4());\r\n\r\n\r\n            sliceArray.push(ySlice);\r\n            normalsArray.push(yNormals);\r\n            texCoorsArray.push(yTexCoords);\r\n            indexsArray.push(yIndexs);\r\n            modelMatrixArray.push(modelMatrix);\r\n\r\n            nameArray.push(\"latSection\")\r\n        }\r\n        if(slice.z !== undefined){\r\n            let _zSlice = Math.max(slice.z,0.003) * deltaH\r\n            //\r\n\r\n            let zSlice = new Float64Array([\r\n                0.0, 0.0, _zSlice,\r\n                deltaX, 0.0, _zSlice,\r\n                0.0, deltaY, _zSlice,\r\n                deltaX, deltaY, _zSlice\r\n            ]);\r\n            let modelMatrix = Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\r\n                Cesium.Cartesian3.fromDegrees(xstart, ystart, zcen)),\r\n                new Cesium.Cartesian3(0.0, 0.0, 0.0), new Cesium.Matrix4());\r\n\r\n            sliceArray.push(zSlice);\r\n            normalsArray.push(zNormals);\r\n            texCoorsArray.push(zTexCoords);\r\n            indexsArray.push(zIndexs);\r\n            modelMatrixArray.push(modelMatrix);\r\n\r\n            nameArray.push(\"heiSection\")\r\n        }\r\n        // this._sectpri.forEach(pri => {\r\n        //     viewer.scene.primitives.remove(pri)\r\n        // })\r\n        // this._sectpri = [];\r\n        //create Geometry\r\n        for (let i = 0; i < nameArray.length; i++) {\r\n            let attributes = new Cesium.GeometryAttributes();\r\n            attributes.position = new Cesium.GeometryAttribute({\r\n                componentDatatype: Cesium.ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute: 3,\r\n                values: sliceArray[i]\r\n            });\r\n\r\n            attributes.normal = new Cesium.GeometryAttribute({\r\n                componentDatatype: Cesium.ComponentDatatype.FLOAT,\r\n                componentsPerAttribute: 3,\r\n                values: normalsArray[i]\r\n            });\r\n\r\n            attributes.st = new Cesium.GeometryAttribute({\r\n                componentDatatype: Cesium.ComponentDatatype.FLOAT,\r\n                componentsPerAttribute: 2,\r\n                values: texCoorsArray[i]\r\n            });\r\n\r\n            let geo = new Cesium.Geometry({\r\n                attributes: attributes,\r\n                indices: indexsArray[i],\r\n                primitiveType: Cesium.PrimitiveType.TRIANGLES,\r\n                boundingSphere: Cesium.BoundingSphere.fromVertices(sliceArray[i]),\r\n            });\r\n            let pri = new Cesium.Primitive({\r\n                // geometryInstances: new Cesium.GeometryInstance({\r\n                //     geometry: geo,\r\n                //     id: nameArray[i],\r\n                //     // attributes: attributes,\r\n                // }),\r\n                geometryInstances:new Cesium.GeometryInstance({\r\n                    geometry: geo,\r\n                    id: nameArray[i],\r\n\r\n                }),\r\n                //modelMatrix : modelMatrixArray[i],\r\n                modelMatrix: matrix,\r\n                asynchronous: false,\r\n                releaseGeometryInstances:false,\r\n                appearance: new Cesium.MaterialAppearance({\r\n                    material: material,\r\n                    vertexShaderSource: this.shader.sliceVertexShaderPass,\r\n                    fragmentShaderSource: this.shader.sliceFragmentShaderPass,\r\n                    faceForward: true\r\n                })\r\n            });\r\n            this._sectpri.push(pri);\r\n            this._sectgeo.push(geo);\r\n            viewer.scene.primitives.add(pri);\r\n        }\r\n\r\n        this.sliceInited = true\r\n    }\r\n    initSlice_2(sliceP){\r\n        let viewer = this._map.GetView();\r\n\r\n        //计算参数\r\n        let param = this._calcParam();\r\n        let {xcen,ycen,zcen,deltaMaxH,deltaX,deltaY,deltaH,deltalon,deltalat,xmin,ymin,zmin,xmax, ymax,zmax} = param\r\n        let matrix = param.cenMatrix;\r\n        let invMatrixs = param.invCenMatrix;\r\n\r\n\r\n        if (this._vol.pri) this._vol.pri.show = false;\r\n        if (this._filter.pri) this._filter.pri.show = false;\r\n\r\n        this._sectpri.forEach((pri,index) => {\r\n            if(pri.show !== false){\r\n                viewer.scene.primitives.remove(pri)\r\n                // pri = pri  && pri.destroy();\r\n                this._sectpri[index] = null\r\n            }\r\n\r\n\r\n        })\r\n        // 向shader传参\r\n        this.slice_material = this.slice_material ||  new Cesium.Material({\r\n            translucent: false,\r\n            fabric: {\r\n                type: 'PramLQ',\r\n                uniforms: {\r\n                    //cubeTex : './radar.png',\r\n                    cubeTex: this.image,\r\n                    transferTex: this._color,\r\n                    invMat: Cesium.Matrix4.toArray(invMatrixs),\r\n                    box: new Cesium.Cartesian3(deltalon, deltalat,deltaH), //boxLon : deltalon,//boxLat : deltalat,//boxHeight : deltaH,\r\n                    boxmin: new Cesium.Cartesian3(xmin, ymin,zmin), // minHeight :  zmin,抬高时需更新zmin// minLongitude : xmin,// minLatitude  : ymin,\r\n                    boxmax:  new Cesium.Cartesian3(xmax, ymax,zmax), //maxHeight : zmax,//maxLongitude : xmax,//maxLatitude :  ymax,\r\n                    // 不满16位补0\r\n                    line : this._line.length < 16 ? this._line.concat(new Array(16-this._line.length).fill(0)) : this._line,\r\n                    texmin: new Cesium.Cartesian3(0.0,0.0,0.0),\r\n                    texmax : new Cesium.Cartesian3(1.0, 1.0,1.0)\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n        //create buffer\r\n        let nameArray = [\"lonSection\", \"latSection\", \"heiSection\"];\r\n\r\n        let geoArray = [];\r\n\r\n        // xslice\r\n        let xWall = Cesium.WallGeometry.fromConstantHeights({\r\n            positions : Cesium.Cartesian3.fromDegreesArray([\r\n                sliceP[0][0], sliceP[0][1],\r\n                sliceP[0][3], sliceP[0][4],\r\n            ]),\r\n            minimumHeight : zmin,\r\n            maximumHeight : sliceP[0][5]+zmin\r\n        });\r\n\r\n\r\n        let xGeo = Cesium.WallGeometry.createGeometry(xWall);\r\n        geoArray.push(xGeo);\r\n\r\n        // yslice\r\n        let yWall = Cesium.WallGeometry.fromConstantHeights({\r\n            positions : Cesium.Cartesian3.fromDegreesArray([\r\n                sliceP[1][0], sliceP[1][1],\r\n                sliceP[1][3], sliceP[1][4],\r\n            ]),\r\n            minimumHeight : zmin,\r\n            maximumHeight : sliceP[1][5]+zmin\r\n        });\r\n\r\n        geoArray.push(Cesium.WallGeometry.createGeometry(yWall));\r\n\r\n\r\n        // zslice\r\n        let zGeo = new Cesium.RectangleGeometry({\r\n            rectangle: Cesium.Rectangle.fromDegrees(sliceP[2][0], sliceP[2][1], sliceP[2][2], sliceP[2][3]),\r\n            height: sliceP[2][4],\r\n            // extrudedHeight:0\r\n        });\r\n        geoArray.push(Cesium.RectangleGeometry.createGeometry(zGeo));\r\n\r\n        //add slice primitive\r\n        for (let i = 0; i < geoArray.length; i++) {\r\n            if(this._sectpri[i] == null){\r\n                let pri = new Cesium.Primitive({\r\n                    geometryInstances: new Cesium.GeometryInstance({\r\n                        geometry: geoArray[i],\r\n                        id: nameArray[i],\r\n                        attributes : {\r\n                            color : Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.TRANSPARENT)\r\n                        },\r\n                    }),\r\n                    asynchronous: false,\r\n                    appearance: new Cesium.MaterialAppearance({\r\n                        material: this.slice_material,\r\n                        vertexShaderSource: this.shader.sliceVertexShaderPass,\r\n                        fragmentShaderSource: this.shader.sliceFragmentShaderPass,\r\n                        faceForward: true\r\n                    })\r\n                });\r\n                this._sectpri[i] = pri;\r\n                viewer.scene.primitives.add(pri);\r\n            }\r\n\r\n        }\r\n\r\n        this.sliceInited = true\r\n    }\r\n\r\n    reset() {\r\n        this._scale = [1, 1, 1];\r\n        this._offset = [0, 0, 0];\r\n        return this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        this.showVolume();\r\n        return;\r\n    }\r\n\r\n    showVolume() {\r\n        this.setVolume();\r\n        this.visible = true;\r\n    }\r\n\r\n    destroy() {\r\n        let viewer = this._map.GetView();\r\n        let pris = viewer.scene.primitives;\r\n        if (this._vol.pri) {\r\n            pris.remove(this._vol.pri);\r\n            //this._vol.pri && this._vol.pri.destroy();\r\n            this._vol.pri = null;\r\n        }\r\n        if (this._filter.pri) {\r\n            pris.remove(this._filter.pri);\r\n            //this._vol.pri && this._vol.pri.destroy();\r\n            this._filter.pri = null;\r\n        }\r\n        this._sectpri.forEach(pri =>{\r\n            pris.remove(pri)\r\n        });\r\n        this._sectpri = [];\r\n        this._sectgeo = [];\r\n\r\n        this.sliceInited = false;\r\n        return;\r\n    }\r\n\r\n    set colorMap(colorMap){\r\n        if (this._vol.pri) {\r\n            let pri = this._vol.pri;\r\n            // let uni = Object.assign(pri.appearance.material.uniforms,uniforms)\r\n            pri.appearance.material.uniforms.transferTex = colorMap\r\n        }\r\n        return colorMap\r\n    }\r\n    /**\r\n     * 设置属性过滤\r\n     * @param open {boolean} 是否开启属性过滤\r\n     */\r\n    set filter(open){\r\n        if(open){\r\n            this._setFilter()\r\n            this.filterControl && (this.filterControl.element.style.visibility = \"visible\")\r\n        }else{\r\n            this.setVolume()\r\n            this.filterControl && (this.filterControl.element.style.visibility = \"hidden\")\r\n        }\r\n        this._filterOpen = open\r\n    }\r\n    get filter(){\r\n        return this._filterOpen\r\n    }\r\n\r\n    /**\r\n     * 统一minHei,minLng,minLat,maxHei,maxLng,maxLat方法\r\n     * @param uniforms {Object} 包含以下属性：[minHeight,minLongitude,minLatitude,maxHeight,maxLongitude,maxLatitude]等\r\n     * @see minHei\r\n     * @see minLng\r\n     * @see minLat\r\n     * @see maxHei\r\n     * @see maxLng\r\n     * @see maxLat\r\n     */\r\n    set range(uniforms){\r\n        if (this._vol.pri) {\r\n            let pri = this._vol.pri;\r\n            // let uni = Object.assign(pri.appearance.material.uniforms,uniforms)\r\n\r\n            if(this.mode === this.SURFACE){\r\n                let {zmin,deltaH,deltaX,deltaY} = this._calcParam()\r\n                let keep = function(val){   //keep the value in [0,1]\r\n                    return Number(Math.max(Math.min(val,0.9999999),0.000001).toFixed(6))\r\n                }\r\n                let _uniforms = {\r\n                    texmin: new Cesium.Cartesian3(keep(uniforms.minLongitude/deltaX),keep(uniforms.minLatitude/deltaY),keep((uniforms.minHeight-zmin)/deltaH)),\r\n                    texmax : new Cesium.Cartesian3(keep(uniforms.maxLongitude/deltaX),keep(uniforms.maxLatitude/deltaY) ,keep((uniforms.maxHeight-zmin)/deltaH)),\r\n                    // righttex: keep(uniforms.maxLongitude/deltaX),\r\n                    // lefttex: keep(uniforms.minLongitude/deltaX),\r\n                    // uptex: keep((uniforms.maxHeight-zmin)/deltaH),\r\n                    // downtex: keep((uniforms.minHeight-zmin)/deltaH),\r\n                    // forwardtex: keep(uniforms.minLatitude/deltaY),\r\n                    // backtex: keep(uniforms.maxLatitude/deltaY)\r\n                }\r\n                pri.appearance.material.uniforms = Object.assign(pri.appearance.material.uniforms,_uniforms);\r\n            }else{\r\n                pri.appearance.material.uniforms = Object.assign(pri.appearance.material.uniforms,uniforms);\r\n            }\r\n        }\r\n    }\r\n\r\n    SetOffset(arr) {\r\n        this._offset = arr;\r\n        this.refresh();\r\n    }\r\n\r\n    _calcScaleOffsetBox() {\r\n        let newBox = {}, box = this._box, offset = this._offset, scale = this._scale;\r\n        let xoffset = offset[0], yoffset = offset[1], zoffset = offset[2];\r\n        let xscale = scale[0], yscale = scale[1], zscale = scale[2];\r\n\r\n        //x\r\n        newBox.xmin = xoffset + box.xmin * xscale;\r\n        newBox.xmax = xoffset + box.xmax * xscale;\r\n\r\n        //y\r\n        newBox.ymin = yoffset + box.ymin * yscale;\r\n        newBox.ymax = yoffset + box.ymax * yscale;\r\n\r\n        //z\r\n        newBox.zmin = zoffset + box.zmin * zscale;\r\n        newBox.zmax = zoffset + box.zmax * zscale;\r\n\r\n        return newBox;\r\n    }\r\n\r\n    _getModelMatrix() {\r\n        return this._vol.pri.modelMatrix;\r\n    }\r\n\r\n    _setModelMatrix(mat) {\r\n        this._vol.pri.modelMatrix = mat;\r\n\r\n    }\r\n\r\n    SetModelMatrix(value, priName) {\r\n        if (priName == undefined) {\r\n            this._vol.pri.modelMatrix = this.CalculateMatrix(value);\r\n        } else {\r\n            let priobj = this.getSecPri(priName);\r\n            priobj.modelMatrix = this.CalculateMatrix(value);\r\n        }\r\n\r\n    }\r\n\r\n    CalculateMatrix(input) {\r\n        let output = Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\r\n            Cesium.Cartesian3.fromDegrees(input[0], input[1], input[2])), new Cesium.Cartesian3(0.0, 0.0, 0.0), new Cesium.Matrix4());\r\n        return output;\r\n    }\r\n\r\n    _calcModelMatrix() {\r\n        let offset = this._offset, scale = this._scale;\r\n\r\n        let copyMat = new Cesium.Matrix4();\r\n\r\n\r\n        //\r\n        let box = this._box;\r\n        let xcen = (box.xmin + box.xmax) / 2;\r\n        let ycen = (box.ymin + box.ymin) / 2;\r\n\r\n        //offset\r\n        let trs = new Cesium.TranslationRotationScale();\r\n        //trs.translation = Cesium.Cartesian3.fromDegrees(0, 0, 0);\r\n\r\n        //rotate\r\n        let hpr = Cesium.HeadingPitchRoll.fromDegrees(0.0, 0.0, 0.0, new Cesium.HeadingPitchRoll());\r\n        trs.rotation = Cesium.Quaternion.fromHeadingPitchRoll(hpr, new Cesium.Quaternion());\r\n\r\n        //scale\r\n        trs.scale = Cesium.Cartesian3.fromElements(scale[0], scale[1], scale[2], new Cesium.Cartesian3())\r\n\r\n        return Cesium.Matrix4.fromTranslationRotationScale(trs, new Cesium.Matrix4());\r\n    }\r\n\r\n    _calcParam() {\r\n        let scale = this._scale;\r\n        let offset = this._offset;\r\n        let box = this._calcScaleOffsetBox();\r\n\r\n\r\n        //经纬度单位计算\r\n        let xcen = (box.xmin + box.xmax) / 2;\r\n        let ycen = (box.ymin + box.ymax) / 2;\r\n        let zcen = (box.zmin + box.zmax) / 2;\r\n        let deltaH = box.zmax - box.zmin;\r\n        let deltaMinH = box.zmin;\r\n        let deltaMaxH = box.zmax;\r\n        let deltalon = box.xmax - box.xmin;\r\n        let deltalat = box.ymax - box.ymin;\r\n\r\n        // 求指定经纬度所代表的长宽范围\r\n        let a = Cesium.Cartesian3.fromDegrees(box.xmin, box.ymax, deltaMinH);\r\n        let c = Cesium.Cartesian3.fromDegrees(box.xmin, box.ymin, deltaMinH);\r\n        let d = Cesium.Cartesian3.fromDegrees(box.xmax, box.ymax, deltaMinH);\r\n\r\n        //跨度\r\n        let deltaX = Math.sqrt((d.x - a.x) * (d.x - a.x) + (d.y - a.y) * (d.y - a.y) + (d.z - a.z) * (d.z - a.z));\r\n        let deltaY = Math.sqrt((c.x - a.x) * (c.x - a.x) + (c.y - a.y) * (c.y - a.y) + (c.z - a.z) * (c.z - a.z));\r\n        let recDiagonal = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n\r\n        // 求Cen几何体变换矩阵的逆矩阵\r\n        let cenMatrix = Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\r\n            Cesium.Cartesian3.fromDegrees(box.xmin, box.ymin, deltaMinH)),\r\n            new Cesium.Cartesian3(0.0, 0.0, 0.0), new Cesium.Matrix4());\r\n        let invCenMatrixs = new Cesium.Matrix4();\r\n        invCenMatrixs = Cesium.Matrix4.inverse(cenMatrix, invCenMatrixs);\r\n\r\n\r\n        //平移\r\n        return {\r\n            xmin: box.xmin,\r\n            xmax: box.xmax,\r\n            ymin: box.ymin,\r\n            ymax: box.ymax,\r\n            zmin: box.zmin,\r\n            zmax: box.zmax,\r\n            xcen: xcen,\r\n            ycen: ycen,\r\n            zcen: zcen,\r\n            deltalon: deltalon,\r\n            deltalat: deltalat,\r\n            deltaH: deltaH,\r\n            deltaMinH: deltaMinH,\r\n            deltaMaxH: deltaMaxH,\r\n            a: a,\r\n            c: c,\r\n            d: d,\r\n            deltaX: deltaX,\r\n            deltaY: deltaY,\r\n            cenMatrix: cenMatrix,\r\n            invCenMatrix: invCenMatrixs,\r\n            from:{\r\n                longitude:box.xmin,\r\n                latitude:box.ymin,\r\n                height:box.zmin\r\n            },\r\n            to:{\r\n                longitude:box.xmax,\r\n                latitude:box.ymax,\r\n                height:box.zmax\r\n            },\r\n            recDiagonal:recDiagonal,\r\n        };\r\n    }\r\n\r\n    getSecPri(name) {\r\n        let secpriArr = this._sectpri;\r\n        let secpri = null;\r\n        for (let i = 0; i < secpriArr.length; i++) {\r\n            if ((secpriArr[i]._instanceIds)[0] == name) {\r\n                secpri = secpriArr[i];\r\n                break;\r\n            }\r\n        }\r\n        return secpri;\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n * param参数 *为空则为默认值\r\n * name_X:x轴名称\r\n * split_X:x轴分段数\r\n * max_X:x轴最大值\r\n * min_X:x轴最小值\r\n * tolerance:点击容差\r\n * ...\r\n * line:二维数组,[[x1,y1],[x2,y2],...]\r\n * */\r\nclass FilterEdit {\r\n    constructor(element,param){\r\n        if(!element instanceof Element){\r\n            throw new Error(\"请传入一个正确的页面元素\")\r\n        }\r\n        this.element = element\r\n        this.param = Object.assign({\r\n            name_X: \"属性值\",\r\n            split_X: 4,\r\n            max_X: 1000,\r\n            min_X: 0,\r\n            name_Y: \"透明度\",\r\n            split_Y: 5,\r\n            max_Y: 1000,\r\n            min_Y: 0,\r\n            olerance: 3,\r\n            bkColor: \"#22344C\",\r\n            axisColor: \"#C6CDCC\",\r\n            lineColor: \"#FF0000\",\r\n            fontColor: \"#C6CDCC\",\r\n            textSpace: 2,\r\n        },param)\r\n        for(let key in this.param){\r\n            this[\"_\"+key] = this.param[key]\r\n        }\r\n        this._line = this.param.line ? this.param.line : [[0,0],[this._max_X,this._max_Y]];\r\n\r\n        this._init(this.element)\r\n    }\r\n\r\n    _init(div) {\r\n        this.x_axis = 30;\r\n        this.y_axis = 40;\r\n        this._width = div.offsetWidth;\r\n        this._height = div.offsetHeight;\r\n        this.painter = document.createElement('canvas');\r\n        this.painter.width = this._width;\r\n        this.painter.height = this._height;\r\n        let lbtn_down = 0;\r\n        let thisobj = this;\r\n        let point_line;\r\n        this.parse_line();\r\n        let highlight_status = -1;\r\n        this.painter.addEventListener('mousedown', function (e) {\r\n\r\n            if (point_line.relation == 1)\r\n                lbtn_down = 1;\r\n            else if (point_line.relation == 2) {\r\n                //插入点\r\n                thisobj.trans_line.splice(point_line.position, 0, point_line.point);\r\n                lbtn_down = 1;\r\n                highlight_status = point_line.position;\r\n                thisobj._draw(highlight_status);\r\n                thisobj.reverse_parse_line();\r\n            }\r\n        })\r\n        this.painter.addEventListener('mousemove', e=> {\r\n            if (lbtn_down == 1) {\r\n                let yposition;\r\n                if (e.offsetY <= 50)\r\n                    yposition = 50;\r\n                else if (e.offsetY > thisobj._height - thisobj.x_axis)\r\n                    yposition = thisobj._height - thisobj.x_axis;\r\n                else\r\n                    yposition = e.offsetY;\r\n\r\n                if (point_line.position == 0)\r\n                    thisobj.trans_line[point_line.position] = [thisobj.y_axis, yposition];\r\n                else if (point_line.position == thisobj.trans_line.length - 1)\r\n                    thisobj.trans_line[point_line.position] = [thisobj._width - 50, yposition];\r\n                else {\r\n                    thisobj.trans_line[point_line.position] = [e.offsetX, yposition];\r\n\r\n                    for (let i = 1; i < thisobj.trans_line.length - 1 - point_line.position; i++) {\r\n                        if (thisobj.trans_line[point_line.position + i][0] <= e.offsetX)\r\n                            thisobj.trans_line[point_line.position + i][0] = e.offsetX;\r\n                    }\r\n                    for (let i = 0; i < point_line.position; i++) {\r\n                        if (thisobj.trans_line[i][0] >= e.offsetX)\r\n                            thisobj.trans_line[i][0] = e.offsetX;\r\n                    }\r\n                    if (e.offsetX >= thisobj._width - 50) {\r\n                        thisobj.trans_line.splice(point_line.position + 1, thisobj.trans_line.length - 1 - point_line.position);\r\n                        thisobj.trans_line[point_line.position] = [thisobj._width - 50, yposition];\r\n                    }\r\n                    if (e.offsetX <= thisobj.y_axis) {\r\n                        thisobj.trans_line.splice(0, point_line.position);\r\n                        point_line.position = 0;\r\n                        thisobj.trans_line[0] = [thisobj.y_axis, yposition];\r\n                    }\r\n                }\r\n                highlight_status = point_line.position;\r\n                thisobj._draw(point_line.position);\r\n                thisobj.reverse_parse_line();\r\n                thisobj.onchangestatus(point_line.position, thisobj._line);\r\n            }\r\n            else {\r\n                //mouseon\r\n                let point = [e.offsetX, e.offsetY];\r\n                point_line = this.relation(point, thisobj.trans_line, thisobj._tolerance);\r\n\r\n                if (point_line.relation == 1) {\r\n                    thisobj.highlight(point_line.position);\r\n                    highlight_status = point_line.position;\r\n                }\r\n                else {\r\n                    if (highlight_status >= 0) {\r\n                        thisobj._draw();\r\n                        highlight_status = -1;\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        this.painter.addEventListener('mouseup', function (e) {\r\n            if (lbtn_down == 1) {\r\n                lbtn_down = 0;\r\n                thisobj.onchangestatus_over(point_line.position, thisobj._line);\r\n            }\r\n        })\r\n        this.painter.addEventListener('mouseout', function (e) {\r\n            if (lbtn_down == 1) {\r\n                lbtn_down = 0;\r\n                thisobj.onchangestatus_over(point_line.position, thisobj._line);\r\n            }\r\n        })\r\n        div.appendChild(this.painter);\r\n\r\n        this._draw()\r\n    }\r\n\r\n    _reset() {\r\n        this._line = [[0, 0], [this._max_X, this._max_Y]];\r\n        this.parse_line();\r\n        this._draw();\r\n    }\r\n\r\n    _resetMax() {\r\n        this._line = [[0, this._max_Y], [this._max_X, this._max_Y]];\r\n        this.parse_line();\r\n        this._draw();\r\n    }\r\n\r\n    _resetPoints(points) {\r\n        this._line = points;//[[0, this._max_Y], [this._max_X, this._max_Y]];\r\n        this.parse_line();\r\n        this._draw();\r\n    }\r\n\r\n    _draw(i) {\r\n        this.clearCanvas();\r\n        this._draw_arrow();\r\n        this._draw_line(i);\r\n    }\r\n\r\n    _draw_arrow() {\r\n        let context = this.painter.getContext(\"2d\");\r\n        context.beginPath();\r\n        context.lineWidth = \"1\";\r\n        context.strokeStyle = this._axisColor;\r\n        context.font = \"10px Courier New\";\r\n        context.fillStyle = this._fontColor;\r\n        //y\r\n        context.moveTo(this.y_axis, this._height - this.x_axis);\r\n        context.lineTo(this.y_axis, 30);\r\n        context.lineTo(this.y_axis - 4, 34);\r\n        context.moveTo(this.y_axis, 30);\r\n        context.lineTo(this.y_axis + 4, 34);\r\n        //x\r\n        context.moveTo(this.y_axis, this._height - this.x_axis);\r\n        context.lineTo(this._width - 30, this._height - this.x_axis);\r\n        context.lineTo(this._width - 34, this._height - this.x_axis - 4);\r\n        context.moveTo(this._width - 30, this._height - this.x_axis);\r\n        context.lineTo(this._width - 34, this._height - this.x_axis + 4);\r\n        //x刻度\r\n        let cell_x = (this._width - 50 - this.y_axis) / this._split_X;\r\n        let cell_x_value = ((this._max_X - this._min_X) / this._split_X).toFixed(0);\r\n        for (let i = 1; i <= this._split_X; i++) {\r\n            context.moveTo(cell_x * i + this.y_axis, this._height - this.x_axis);\r\n            if (i % this._textSpace == 1) {\r\n                //画长标签\r\n                context.lineTo(cell_x * i + this.y_axis, this._height - this.x_axis + 5);\r\n                context.fillText(this._min_X + cell_x_value * i, cell_x * i + this.y_axis - 5, this._height - this.x_axis + 15);\r\n            }\r\n            else {\r\n                //画短标签\r\n                context.lineTo(cell_x * i + this.y_axis, this._height - this.x_axis + 3);\r\n            }\r\n        }\r\n        context.moveTo(this._width - 50, this._height - 30);\r\n        context.lineTo(this._width - 50, 50);\r\n        context.fillText(this._name_X, this._width - 45, this._height - this.x_axis - 11);\r\n        context.fillText(this._name_Y, this.y_axis - 15, 30);\r\n        context.stroke();\r\n        context.beginPath();\r\n        //y刻度\r\n        context.strokeStyle = this._axisColor;\r\n        context.lineWidth = \"1\";\r\n        let cell_y = (this._height - this.x_axis - 50) / this._split_Y;\r\n        let cell_y_value = ((this._max_Y - this._min_Y) / this._split_Y).toFixed(0);\r\n        for (let i = 0; i < this._split_Y; i++) {\r\n            context.moveTo(this.y_axis, cell_y * i + 50);\r\n            context.lineTo(this._width - 50, cell_y * i + 50);\r\n            context.fillText(this._max_Y - cell_y_value * i, this.y_axis - 30, cell_y * i + 53);\r\n        }\r\n        context.stroke();\r\n    }\r\n\r\n    _draw_line(position) {\r\n        let context = this.painter.getContext(\"2d\");\r\n\r\n        context.lineWidth = \"1\";\r\n        context.strokeStyle = this._lineColor;\r\n        context.beginPath();\r\n        context.moveTo(this.trans_line[0][0], this.trans_line[0][1]);\r\n        for (let i = 1; i < this.trans_line.length; i++) {\r\n            context.lineTo(this.trans_line[i][0], this.trans_line[i][1]);\r\n        }\r\n        context.stroke();\r\n\r\n        context.lineWidth = \"1\";\r\n        context.fillStyle = this._lineColor;\r\n        for (let i = 0; i < this.trans_line.length; i++) {\r\n            context.beginPath();\r\n            context.arc(this.trans_line[i][0], this.trans_line[i][1], 4, 0, Math.PI * 2);\r\n            context.fill();\r\n        }\r\n        if (position) {\r\n            this.highlight(position);\r\n        }\r\n    }\r\n\r\n    highlight(i) {\r\n        let context = this.painter.getContext(\"2d\");\r\n        context.lineWidth = \"1\";\r\n        context.fillStyle = this._lineColor;\r\n        context.beginPath();\r\n        context.arc(this.trans_line[i][0], this.trans_line[i][1], 5, 0, Math.PI * 2);\r\n        context.fill();\r\n    }\r\n\r\n    clearCanvas() {\r\n        let context = this.painter.getContext(\"2d\");\r\n        context.beginPath();\r\n        context.fillStyle = this._bkColor;\r\n        context.fillRect(0, 0, this._width, this._height);\r\n        context.closePath();\r\n    }\r\n\r\n    parse_line() {\r\n        this.trans_line = [];\r\n        for (let i = 0; i < this._line.length; i++) {\r\n            let re = [];\r\n            re[0] = (this._line[i][0] - this._min_X) / (this._max_X - this._min_X) * (this._width - this.y_axis - 50) + this.y_axis;\r\n            re[1] = this._height - this.x_axis - ((this._line[i][1] - this._min_Y) / (this._max_Y - this._min_Y) * (this._height - this.x_axis - 50));\r\n            this.trans_line.push(re);\r\n        }\r\n\r\n    }\r\n\r\n    reverse_parse_line() {\r\n        this._line = [];\r\n        for (let i = 0; i < this.trans_line.length; i++) {\r\n            let re = [];\r\n            re[0] = ((this.trans_line[i][0] - this.y_axis) / (this._width - this.y_axis - 50) * (this._max_X - this._min_X) + this._min_X).toFixed(1);\r\n            re[1] = ((this._height - this.x_axis - this.trans_line[i][1]) / (this._height - this.x_axis - 50) * (this._max_Y - this._min_Y) + this._min_Y).toFixed(1);\r\n            this._line.push(re);\r\n        }\r\n\r\n    }\r\n\r\n    onchangestatus() {\r\n\r\n    }\r\n\r\n    onchangestatus_over() {\r\n\r\n    }\r\n\r\n    relation(point, line, tole) {\r\n        let obj = {};\r\n        for (let i = 0; i < line.length; i++) {\r\n            if (this.pp_distance(point, line[i]) <= tole + 2) {\r\n                obj.relation = 1;\r\n                obj.position = i;\r\n                return obj;\r\n            }\r\n        }\r\n        for (let i = 0; i < line.length - 1; i++) {\r\n            if (this.pointLine_Disp(point[0], point[1], line[i][0], line[i][1], line[i + 1][0], line[i + 1][1]) <= tole) {\r\n                obj.relation = 2;\r\n                obj.point = point;\r\n                obj.position = i + 1;\r\n                return obj;\r\n            }\r\n        }\r\n        obj.relation = 0;\r\n        return obj;\r\n    }\r\n\r\n    pp_distance(point1, point2) {\r\n        let xdiff = point1[0] - point2[0];            // 计算两个点的横坐标之差\r\n        let ydiff = point1[1] - point2[1];\r\n        return Math.pow((xdiff * xdiff + ydiff * ydiff), 0.5);\r\n    }\r\n\r\n    pointLine_Disp(xx, yy, x1, y1, x2, y2) {\r\n        let a, b, c, ang1, ang2, ang, m;\r\n        let result = 0;\r\n        //分别计算三条边的长度\r\n        a = Math.sqrt((x1 - xx) * (x1 - xx) + (y1 - yy) * (y1 - yy));\r\n        if (a == 0)\r\n            return -1;\r\n        b = Math.sqrt((x2 - xx) * (x2 - xx) + (y2 - yy) * (y2 - yy));\r\n        if (b == 0)\r\n            return -1;\r\n        c = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\r\n        //如果线段是一个点则退出函数并返回距离\r\n        if (c == 0) {\r\n            result = a;\r\n            return result;\r\n        }\r\n        //如果点(xx,yy到点x1,y1)这条边短\r\n        if (a < b) {\r\n            //如果直线段AB是水平线。得到直线段AB的弧度\r\n            if (y1 == y2) {\r\n                if (x1 < x2)\r\n                    ang1 = 0;\r\n                else\r\n                    ang1 = Math.PI;\r\n            }\r\n            else {\r\n                m = (x2 - x1) / c;\r\n                if (m - 1 > 0.00001)\r\n                    m = 1;\r\n                ang1 = Math.acos(m);\r\n                if (y1 > y2)\r\n                    ang1 = Math.PI * 2 - ang1;//直线(x1,y1)-(x2,y2)与折X轴正向夹角的弧度\r\n            }\r\n            m = (xx - x1) / a;\r\n            if (m - 1 > 0.00001)\r\n                m = 1;\r\n            ang2 = Math.acos(m);\r\n            if (y1 > yy)\r\n                ang2 = Math.PI * 2 - ang2;//直线(x1,y1)-(xx,yy)与折X轴正向夹角的弧度\r\n\r\n            ang = ang2 - ang1;\r\n            if (ang < 0) ang = -ang;\r\n\r\n            if (ang > Math.PI) ang = Math.PI * 2 - ang;\r\n            //如果是钝角则直接返回距离\r\n            if (ang > Math.PI / 2)\r\n                return a;\r\n            else\r\n                return a * Math.sin(ang);\r\n        }\r\n        else//如果(xx,yy)到点(x2,y2)这条边较短\r\n        {\r\n            //如果两个点的纵坐标相同，则直接得到直线斜率的弧度\r\n            if (y1 == y2)\r\n                if (x1 < x2)\r\n                    ang1 = Math.PI;\r\n                else\r\n                    ang1 = 0;\r\n            else {\r\n                m = (x1 - x2) / c;\r\n                if (m - 1 > 0.00001)\r\n                    m = 1;\r\n                ang1 = Math.acos(m);\r\n                if (y2 > y1)\r\n                    ang1 = Math.PI * 2 - ang1;\r\n            }\r\n            m = (xx - x2) / b;\r\n            if (m - 1 > 0.00001)\r\n                m = 1;\r\n            ang2 = Math.acos(m);//直线(x2-x1)-(xx,yy)斜率的弧度\r\n            if (y2 > yy)\r\n                ang2 = Math.PI * 2 - ang2;\r\n            ang = ang2 - ang1;\r\n            if (ang < 0) ang = -ang;\r\n            if (ang > Math.PI) ang = Math.PI * 2 - ang;//交角的大小\r\n            //如果是对角则直接返回距离\r\n            if (ang > Math.PI / 2)\r\n                return b;\r\n            else\r\n                return b * Math.sin(ang);//如果是锐角，返回计算得到的距离\r\n        }\r\n    }\r\n}\r\n"]}